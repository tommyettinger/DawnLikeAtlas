package dawnliker;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Pixmap;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.ByteArray;
import com.badlogic.gdx.utils.IntIntMap;

import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;

/**
 * Data that can be used to limit the colors present in a Pixmap or other image, here with the goal of using 256 or less
 * colors in the image (for saving indexed-mode images).
 * <p>
 * Created by Tommy Ettinger on 6/23/2018.
 */
public class PaletteReducer {

    public interface ColorMetric{
        double difference(final int color1, int color2);
        double difference(final int color1, int r2, int g2, int b2);
        double difference(final int r1, final int g1, final int b1, final int r2, final int g2, final int b2);
    }
    public static class BasicColorMetric implements ColorMetric{
        /**
         * Color difference metric; returns large numbers even for smallish differences.
         * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
         *
         * @param color1 an RGBA8888 color as an int
         * @param color2 an RGBA8888 color as an int
         * @return the difference between the given colors, as a positive double
         */
        public double difference(final int color1, final int color2) {
            // if one color is transparent and the other isn't, then this is max-different
            if(((color1 ^ color2) & 0x80) == 0x80) return Double.POSITIVE_INFINITY;
            final int r1 = (color1 >>> 24), g1 = (color1 >>> 16 & 0xFF), b1 = (color1 >>> 8 & 0xFF),
                    r2 = (color2 >>> 24), g2 = (color2 >>> 16 & 0xFF), b2 = (color2 >>> 8 & 0xFF),
                    rmean = r1 + r2,
                    r = r1 - r2,
                    g = g1 - g2,
                    b = b1 - b2,
                    y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
            return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
        }
        /**
         * Color difference metric; returns large numbers even for smallish differences.
         * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
         *
         * @param color1 an RGBA8888 color as an int
         * @param r2     red value from 0 to 255, inclusive
         * @param g2     green value from 0 to 255, inclusive
         * @param b2     blue value from 0 to 255, inclusive
         * @return the difference between the given colors, as a positive double
         */
        public double difference(final int color1, int r2, int g2, int b2) {
            if((color1 & 0x80) == 0) return Double.POSITIVE_INFINITY; // if a transparent color is being compared, it is always different
            final int
                    r1 = (color1 >>> 24),
                    g1 = (color1 >>> 16 & 0xFF),
                    b1 = (color1 >>> 8 & 0xFF),
                    rmean = (r1 + r2),
                    r = r1 - r2,
                    g = g1 - g2,
                    b = b1 - b2,
                    y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
            return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
        }
        /**
         * Color difference metric; returns large numbers even for smallish differences.
         * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
         *
         * @param r1 red value from 0 to 255, inclusive
         * @param g1 green value from 0 to 255, inclusive
         * @param b1 blue value from 0 to 255, inclusive
         * @param r2 red value from 0 to 255, inclusive
         * @param g2 green value from 0 to 255, inclusive
         * @param b2 blue value from 0 to 255, inclusive
         * @return the difference between the given colors, as a positive double
         */
        public double difference(final int r1, final int g1, final int b1, final int r2, final int g2, final int b2) {
            final int rmean = (r1 + r2),
                    r = r1 - r2,
                    g = g1 - g2 << 1,
                    b = b1 - b2,
                    y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
            return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
        }
    }

    public static class LABEuclideanColorMetric implements ColorMetric {
        /**
         * Color difference metric (squared) using L*A*B color space; returns large numbers even for smallish differences.
         * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
         *
         * @param rgba1 an RGBA8888 color as an int
         * @param rgba2 an RGBA8888 color as an int
         * @return the difference between the given colors, as a positive double
         */
        @Override
        public double difference(final int rgba1, final int rgba2)
        {
            if(((rgba1 ^ rgba2) & 0x80) == 0x80) return Double.POSITIVE_INFINITY;
            double x, y, z, r, g, b;

            r = (rgba1 >>> 24) / 255.0;
            g = (rgba1 >>> 16 & 0xFF) / 255.0;
            b = (rgba1 >>> 8 & 0xFF) / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            double L = (116.0 * y) - 16.0;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = (rgba2 >>> 24) / 255.0;
            g = (rgba2 >>> 16 & 0xFF) / 255.0;
            b = (rgba2 >>> 8 & 0xFF) / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            L -= 116.0 * y - 16.0;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

            return L * L * 190.0 + A * A * 25.0 + B * B * 10.0;
        }
        @Override
        public double difference(final int rgba1, final int r2, final int g2, final int b2)
        {
            if((rgba1 & 0x80) == 0) return Double.POSITIVE_INFINITY;
            double x, y, z, r, g, b;

            r = (rgba1 >>> 24) / 255.0;
            g = (rgba1 >>> 16 & 0xFF) / 255.0;
            b = (rgba1 >>> 8 & 0xFF) / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            double L = (116.0 * y) - 16.0;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = r2 / 255.0;
            g = g2 / 255.0;
            b = b2 / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            L -= 116.0 * y - 16.0;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

            return L * L * 190.0 + A * A * 25.0 + B * B * 10.0;
        }
        @Override
        public double difference(final int r1, final int g1, final int b1, final int r2, final int g2, final int b2) {
            double x, y, z, r, g, b;

            r = r1 / 255.0;
            g = g1 / 255.0;
            b = b1 / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            double L = (116.0 * y) - 16.0;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = r2 / 255.0;
            g = g2 / 255.0;
            b = b2 / 255.0;

            r = ((r > 0.04045) ? Math.pow((r + 0.055) / 1.055, 2.4) : r / 12.92);
            g = ((g > 0.04045) ? Math.pow((g + 0.055) / 1.055, 2.4) : g / 12.92);
            b = ((b > 0.04045) ? Math.pow((b + 0.055) / 1.055, 2.4) : b / 12.92);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805) / 0.950489; // 0.96422;
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722) / 1.000000; // 1.00000;
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505) / 1.088840; // 0.82521;

            x = (x > 0.008856) ? Math.cbrt(x) : (7.787037037037037 * x) + 0.13793103448275862;
            y = (y > 0.008856) ? Math.cbrt(y) : (7.787037037037037 * y) + 0.13793103448275862;
            z = (z > 0.008856) ? Math.cbrt(z) : (7.787037037037037 * z) + 0.13793103448275862;

            L -= 116.0 * y - 16.0;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

            //return L * L * 190 + A * A * 25 + B * B * 10;
            return L * L * 190.0 + A * A * 25.0 + B * B * 10.0;
        }

    }

    public static class LABRoughColorMetric implements ColorMetric {
        /**
         * Color difference metric (squared) using L*A*B color space; returns large numbers even for smallish differences.
         * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
         *
         * @param rgba1 an RGBA8888 color as an int
         * @param rgba2 an RGBA8888 color as an int
         * @return the difference between the given colors, as a positive double
         */
        @Override
        public double difference(final int rgba1, final int rgba2)
        {
            if(((rgba1 ^ rgba2) & 0x80) == 0x80) return Double.POSITIVE_INFINITY;
            double x, y, z, r, g, b;

            r = (rgba1 >>> 24) / 255.0;
            g = (rgba1 >>> 16 & 0xFF) / 255.0;
            b = (rgba1 >>> 8 & 0xFF) / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.sqrt(x);
            y = Math.cbrt(y);
            z = Math.sqrt(z);

            double L = 100.0 * y;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = (rgba2 >>> 24) / 255.0;
            g = (rgba2 >>> 16 & 0xFF) / 255.0;
            b = (rgba2 >>> 8 & 0xFF) / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.sqrt(x);
            y = Math.cbrt(y);
            z = Math.sqrt(z);

            L -= 100.0 * y;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

            return L * L * 350.0 + A * A * 25.0 + B * B * 10.0;
        }
        @Override
        public double difference(final int rgba1, final int r2, final int g2, final int b2)
        {
            if((rgba1 & 0x80) == 0) return Double.POSITIVE_INFINITY;
            double x, y, z, r, g, b;

            r = (rgba1 >>> 24) / 255.0;
            g = (rgba1 >>> 16 & 0xFF) / 255.0;
            b = (rgba1 >>> 8 & 0xFF) / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.sqrt(x);
            y = Math.cbrt(y);
            z = Math.sqrt(z);

            double L = 100 * y;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = r2 / 255.0;
            g = g2 / 255.0;
            b = b2 / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.sqrt(x);
            y = Math.cbrt(y);
            z = Math.sqrt(z);

            L -= 100.0 * y;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

            return L * L * 350.0 + A * A * 25.0 + B * B * 10.0;
        }
        @Override
        public double difference(final int r1, final int g1, final int b1, final int r2, final int g2, final int b2) {
            double x, y, z, r, g, b;

            r = r1 / 255.0;
            g = g1 / 255.0;
            b = b1 / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.sqrt(x);
            y = Math.cbrt(y);
            z = Math.sqrt(z);

            double L = 100 * y;
            double A = 500.0 * (x - y);
            double B = 200.0 * (y - z);

            r = r2 / 255.0;
            g = g2 / 255.0;
            b = b2 / 255.0;

            r = Math.pow((r + 0.055) / 1.055, 2.4);
            g = Math.pow((g + 0.055) / 1.055, 2.4);
            b = Math.pow((b + 0.055) / 1.055, 2.4);

            x = (r * 0.4124 + g * 0.3576 + b * 0.1805);
            y = (r * 0.2126 + g * 0.7152 + b * 0.0722);
            z = (r * 0.0193 + g * 0.1192 + b * 0.9505);

            x = Math.sqrt(x);
            y = Math.cbrt(y);
            z = Math.sqrt(z);

            L -= 100.0 * y;
            A -= 500.0 * (x - y);
            B -= 200.0 * (y - z);

            return L * L * 350.0 + A * A * 25.0 + B * B * 10.0;
        }

    }

    public static final BasicColorMetric basicMetric = new BasicColorMetric(); // has no state, should be fine static
    public static final LABEuclideanColorMetric labMetric = new LABEuclideanColorMetric();
    public static final LABRoughColorMetric labRoughMetric = new LABRoughColorMetric();
    public byte[] paletteMapping;
    public final int[] paletteArray = new int[256];
    ByteArray curErrorRedBytes, nextErrorRedBytes, curErrorGreenBytes, nextErrorGreenBytes, curErrorBlueBytes, nextErrorBlueBytes;
    float ditherStrength = 0.5f, halfDitherStrength = 0.25f;

    public static final String ENCODED_AURORA =
            "\001\001\001\001\002uu\030\030\030\030\030\027\027\027\027\027\027\027\027ÞÞÞÞÞÞÞ\025\025\025\025\025\001\001\001\002\002uuu\030\030\030\030\030\027\027\027\027\027\027\027ÞÞÞÞÞÞÞÝ\025\025\025\025\001\001\002\002uuuu\030\030\030\030\030\027\027\027\027\027\027ßÞÞÞÞÞÞÝÝÝ\025\025\025\002\002\002\002uuuuàà\030\030\030\030\027\027\027\027ßßÞÞÞÞÞÝÝÝÝÝ\025\025"+
                    "WWWWuuuàààààÊÊËËËËßßÞÞÞÞÞÝÝÝÝÝÝ\025WWWWuuuààààÊÊËËËËËËËÞÞÞÞÝÝÝÝÝÝÝÝWWWg½½½½àÊÊÊÊËËËËËËÌÌÌÌÞÝÝÝÝÝÝÎÎ³³³½½½½½½ÊÊÊËËËËËËÌÌÌÌÌÌÝÝÝÝÎÎÎÎ"+
                    "³³³³½½½½½hÉÉÉËËËËÌÌÌÌÌÌÌÌÎÎÎÎÎÎÎ´´´´½½½½½ÉÉÉÉÉËËÌÌÌÌÌÌÌÌÌÎÎÎÎÎÎÎ´´´´´XXXÉÉÉÉÉÉÉÉÌÌÌÌÌÌÌÏÏÏÎÎÎÎÎÎ´´´´´´fffÉÉÉÉÉÉÉÌÌÌÌÌÌÏÏÏÏÎÎÎÎÎÎ"+
                    "´´´´´´ffffÉÉÉÉÉ\020\020ÌÌÌÌÏÏÏÏÏÏÎÎÎÎÎ+´´´´ffffffÉÉÉ\020\020\020\020\020\020ÏÏÏÏÏÏÏÐÎ×××++++´fffffffÉ\020\020\020\020\020\020\020ÏÏÏÏÏÏÐÐ××××+++++fffffff\020\020\020\020\020\020\020\020ÏÏÏÏÏÐÐÐ××××"+
                    "++++++¼¼¼¼¼¼\020\020\020\020\020\020\020\020\020ÏÏÏÏÈÈÈ××××+++µµµ¼¼¼¼¼¼¼\020\020\020\020\020\020\020\020ÏÏÈÈÈÈÈÈ×××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈ××µµµµµµ¼¼»»»»¾¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈ×"+
                    "µµµµµº»»»»»»»¾¾¾¾¾¾¾¿¿ÈÈÈÈÈÈÈÈÈÖµººººº»»»»»»»»¾¾¾¿¿¿¿¿¿ÈÈÈÈÈÈÖÖÖºººººº»»»»»»»»¿¿¿¿¿¿¿¿¿ÈÈÈÈÈÖÖÖÖººººººº»»»»»»»¿¿¿¿¿¿¿¿¿¿ÇÇÇÖÖÖÖÖ"+
                    "ººººººº»»»»»»ÀÀ¿¿¿¿¿¿¿¿ÇÇÇÇÇÖÖÖÖ¶¶ººººº»»»ÀÀÀÀÀÀ¿¿¿¿¿¿ÇÇÇÇÇÇÇÖÖÖ¶¶¶¶ººººÀÀÀÀÀÀÀÀ¿¿¿¿¿¿ÇÇÇÇÇÇÇÇÖÖ¶¶¶¶¶¶¶ºÀÀÀÀÀÀÀÀÀ¿¿¿¿ÇÇÇÇÇÇÇÇÇÇÖ"+
                    "········ÀÀÀÀÀÀÀÀÀÀ¿ÁÁÁÇÇÇÇÇÇÇÇ\022\022-·······ÀÀÀÀÀÀÀÀÀÀÁÁÁÁÇÇÇÇÇÇÇ\022\022\022-----···ÀÀÀÀÀÀÀÀÀÀÁÁÁÁÁÇÇÇÇÇ\022\022\022\022--------ÀÀÀÀÀÀÀÀÀÀÁÁÁÁÁÇÇÇÇ\022\022\022\022\022"+
                    "\001\001\001\001\002uu\030\030\030\030\030\030\027\027\027\027\027\027\027ÞÞÞÞÞÞÞÝ\025\025\025\025\001\001\002\002\002uuu\030\030\030\030\030\027\027\027\027\027\027ßÞÞÞÞÞÞÝÝ\025\025\025\025\001\002\002\002uuuu\030\030\030\030\030\030\027\027\027\027ßßÞÞÞÞÞÞÝÝÝ\025\025\025W\002\002\002uuuuàà\030\030\030\030\027\027\027ßßßÞÞÞÞÞÝÝÝÝÝ\025\025"+
                    "WWWWuuuàààààÊÊËËËËßßÞÞÞÞÝÝÝÝÝÝÝÝWWWWgu½àààÊÊÊËËËËËËËÞÞÞÞÝÝÝÝÝÝÝÝ²WWgg½½½½ÊÊÊÊËËËËËËÌÌÌÌÝÝÝÝÝÝÝÝÎ³³³g½½½½½ÊÊÊÊËËËËËÌÌÌÌÌÌÝÝÝÝÎÎÎÎ"+
                    "³³³³½½½½½hhÉÉËËËËÌÌÌÌÌÌÌÌÎÎÎÎÎÎÎ³³´´½½½½hhÉÉÉÉËËËÌÌÌÌÌÌÌÏÎÎÎÎÎÎÎ´´´´´XXXXÉÉÉÉÉÉËÌÌÌÌÌÌÌÏÏÏÎÎÎÎÎÎ´´´´´XXffÉÉÉÉÉÉÉÌÌÌÌÌÌÏÏÏÏÏÎÎÎÎÎ"+
                    "´´´´´´ffffÉÉÉÉÉÉ\020ÌÌÌÏÏÏÏÏÏÏÎÎÎÎÎ´´´´´ffffffÉÉÉ\020\020\020\020\020ÏÏÏÏÏÏÏÐÐÐ×××++++´fffffffÉ\020\020\020\020\020\020\020ÏÏÏÏÏÏÐÐÐ×××+++++ffffff¼\020\020\020\020\020\020\020\020ÏÏÏÏÏÐÐÐÐ×××"+
                    "+++++¼¼¼¼¼¼¼¼\020\020\020\020\020\020\020\020ÏÏÏÏÐÐÐ××××µµµµµµ¼¼¼¼¼¼¼\020\020\020¾¾¾¾¾ÏÏÈÈÈÈÈÈ×××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈ××µµµµµµ¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈÈ"+
                    "µµµµµµ»»»»»»»¾¾¾¾¾¾¾¾¿ÈÈÈÈÈÈÈÈÈÖµµºººº»»»»»»»»¾¾¾¿¿¿¿¿¿ÈÈÈÈÈÈÈÖÖºººººº»»»»»»»»¿¿¿¿¿¿¿¿¿ÈÈÈÈÈÖÖÖÖººººººº»»»»»»»¿¿¿¿¿¿¿¿¿¿ÇÇÇÖÖÖÖÖ"+
                    "ººººººº»»»»»»ÀÀ¿¿¿¿¿¿¿¿ÇÇÇÇÇÖÖÖÖ¶¶¶ºººº»»»»ÀÀÀÀ¿¿¿¿¿¿¿ÇÇÇÇÇÇÇÖÖÖ¶¶¶¶¶ºººÀÀÀÀÀÀÀÀ¿¿¿¿¿¿ÇÇÇÇÇÇÇÇÖÖ¶¶¶¶¶¶¶ºÀÀÀÀÀÀÀÀÀ¿¿¿ÁÁÇÇÇÇÇÇÇÇÇÖ"+
                    "········ÀÀÀÀÀÀÀÀÀÀÁÁÁÁÇÇÇÇÇÇÇÇ\022\022········ÀÀÀÀÀÀÀÀÀÀÁÁÁÁÁÇÇÇÇÇÇ\022\022\022---·····ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÇÇÇÇÇ\022\022\022\022------··ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇ\022\022\022\022\022"+
                    "\001\001\001\002u\030\030\030\030\030\030\027\027\027\027\027ßßßÞÞÞÞÞÝÝ\025\025\025\025\001\001\002\002\002uuu\030\030\030\030\030\027\027\027\027ßßßßÞÞÞÞÞÝÝÝ\025\025\025\002\002\002\002\002uuu\030\030\030\030\030\030\027\027ßßßßßÞÞÞÞÝÝÝÝÝ\025\025WW\002\002uuuuàà\030\030\030\030\027ßßßßßßÞÞÞÞÝÝÝÝÝÝ\025"+
                    "WWWWuuuvàààÊÊÊËËËßßßßÞÞÞÝÝÝÝÝÝÝÝWWWggg½vàÊÊÊÊËËËËËËßßÞÞÞÝÝÝÝÝÝÝÝ²²ggg½½½ÊÊÊÊÊËËËËËËËÌÌÌÝÝÝÝÝÝÝÝÜ²³³g½½½½½ÊÊÊÊËËËËËËÌÌÌÌÌÝÝÝÝÎÎÎÎ"+
                    "³³³³½½½½hhhhËËËËËËÌÌÌÌÌÌ\026\026ÎÎÎÎÎÎ³³³³½XXXhhhÉÉÉËËËÌÌÌÌÌÌÌÏÏÎÎÎÎÎÎ´´´´´XXXXÉÉÉÉÉÉËÌÌÌÌÌÌÏÏÏÏÎÎÎÎÎÎ´´´´´XXXffÉÉÉÉÉÉÌÌÌÌÌÏÏÏÏÏÏÎÎÎÎÎ"+
                    "´´´´´ffffffÉÉÉÉÉÍÍÍÍÏÏÏÏÏÏÏÐÎÎÎÎ´´´´´fffffffÉÉ\020\020\020\020ÍÍÏÏÏÏÏÏÐÐÐÐ××+++´´ffffffff\020\020\020\020\020\020ÍÏÏÏÏÏÏÐÐÐ×××+++++fffff¼¼¼\020\020\020\020\020\020\020ÏÏÏÏÏÐÐÐÐ×××"+
                    "++++µ¼¼¼¼¼¼¼¼\020\020\020\020\020\020\020ÏÏÏÏÐÐÐÐÐ×××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾ÏÏÈÈÈÈÈÈÈ××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈ×µµµµµµ¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈÈ"+
                    "µµµµµµ»»»»»»»¾¾¾¾¾¾¾¾¿ÈÈÈÈÈÈÈÈÈÖµµµººº»»»»»»»»¾¾¾¾¿¿¿¿ÈÈÈÈÈÈÈÈÖÖºººººº»»»»»»»»¿¿¿¿¿¿¿¿¿\021ÈÈÈÈÖÖÖÖººººººº»»»»»»»¿¿¿¿¿¿¿¿¿\021\021ÇÇÖÖÖÖÖ"+
                    "¶ºººººº»»»»»»À¿¿¿¿¿¿¿¿¿ÇÇÇÇÇÖÖÖÖ¶¶¶ºººº»»»»ÀÀÀÀ¿¿¿¿¿¿¿ÇÇÇÇÇÇÇÖÖÖ¶¶¶¶¶¶ºº»ÀÀÀÀÀÀÀ¿¿¿¿¿ÁÇÇÇÇÇÇÇÇÖÖ¶¶¶¶¶¶··ÀÀÀÀÀÀÀÀÀ¿¿ÁÁÁÁÇÇÇÇÇÇÇÇÖ"+
                    "········ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÇÇÇÇÇÇÇ\022\022········ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÇÇÇÇÇÇ\022\022\022--······ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇÇ\022\022\022\022-----···ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇ\022\022\022\022\022"+
                    "\001\001ô\030\030\030\030\030\027\027\027\027ßßßßÞÞÞÞÞÝÝ\025\025\025\025\001\002\002\002uu\030\030\030\030\030\030\027\027ßßßßßÞÞÞÞÝÝÝÝ\025\025\025\002\002\002\002\002uuu\030\030\030\030\030\030\027ßßßßßßÞÞÞÞÝÝÝÝÝ\025\025WWW\002uuuvv\030\030\030\030\030ßßßßßßßÞÞÞÝÝÝÝÝÝÝ\025"+
                    "WWWW\003\003vvvàÊÊÊÊËËßßßßßÞÞÞÝÝÝÝÝÝÝÝ²WWggggvvÊÊÊÊÊËËËËËßßÞÞÝÝÝÝÝÝÝÝÜ²²²ggg½½ÊÊÊÊÊËËËËËËËÌÌ\026\026ÝÝÝÝÝÝÜÜ²²²gg½½½hhÊÊÊËËËËËËÌÌÌ\026\026\026ÝÝÝÜÜÜÜ"+
                    "³³³³½½½½hhhhËËËËËËÌÌÌÌÌ\026\026\026\026ÎÎÎÎÎ³³³³XXXXhhhhÉÉËËËÌÌÌÌÌÌ\026\026\026ÎÎÎÎÎÎ³³´´XXXXXXÉÉÉÉÉtÌÌÌÌÌÌÏÏÏÏÏÎÎÎÎÎ´´´´´XXXXfÉÉÉÉÉtÍÍÍÍÌÏÏÏÏÏÏÎÎÎÎÎ"+
                    "´´´´´XfffffÉÉÉÉtÍÍÍÍÏÏÏÏÏÏÏÐÐÎÎÎ´´´´´fffffffÉÉi\020ÍÍÍÍÏÏÏÏÏÏÐÐÐÐ××++´´±ffffffffi\020\020\020\020ÍÍÏÏÏÏÏÐÐÐÐÐ××++++±ffff¼¼¼¼\020\020\020\020\020\020ÍÏÏÏÏÏÐÐÐÐÐ××"+
                    "+µµµµ¼¼¼¼¼¼¼¼\020\020\020\020\020\020\020ÏÏÏÏÐÐÐÐÐÐ××µµµµµ¼¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾ÏÏÈÈÈÈÈÈÈ××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈ×µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈÈ"+
                    "µµµµµµ»»»»»»»¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈÈµµµµºº»»»»»»»»¾¾¾¾¿¿¿¿\021ÈÈÈÈÈÈÈÖÖºººººº»»»»»»»»¾¿¿¿¿¿¿¿\021\021\021ÈÈÈÈÖÖÖºººººº,»»»»»»»¿¿¿¿¿¿¿¿\021\021\021\021ÈÖÖÖÖÖ"+
                    "¶¶ººººº»»»»»»À¿¿¿¿¿¿¿¿\021\021ÇÇÇÇÖÖÖÖ¶¶¶¶ººº,»»»ÀÀÀÀ¿¿¿¿¿¿¿\021ÇÇÇÇÇÇÖÖÖ¶¶¶¶¶¶º,,ÀÀÀÀÀÀÀ¿¿¿¿ÁÁÁÇÇÇÇÇÇÇÖÖ········ÀÀÀÀÀÀÀÀÀ¿ÁÁÁÁÁÇÇÇÇÇÇÇÇÖ"+
                    "········ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇÇÇÇ\022\022········ÀÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇÇÇ\022\022\022-·······¹¹ÀÀÀÀÀÀÁÁÁÁÁÁÁÁÇÇÇÇ\022\022\022\022----····¹¹¹ÀÀÀÀÀÂÂÂÁÁÁÁÁÁÇÇ\022\022\022\022\022"+
                    "\001ôôôô\030óó\027\027ßßßßßßÞÞÞÞÝÝ\025\025\025\025\002\002ôôô\030\030\030ó\027ßßßßßßßÞÞÞÝÝÝÝ\025\025\025\002\002\002uvô\030\030\030\030\030ßßßßßßßßÞÞÝÝÝÝÝÝ\025\025WWWWuvvvv\030\030\030\030ßßßßßßßßÞÞÝÝÝÝÝÝÝ\025"+
                    "WWWW\003\003vvvvÊÊÊÊËËßßßßßßÞÝÝÝÝÝÝÝÝÝ²²Wgg\003\003vvÊÊÊÊÊËËËËßßßß\026ÝÝÝÝÝÝÝÜÜ²²²gggg½hÊÊÊÊËËËËËËË\026\026\026\026\026ÝÝÝÜÜÜÜ²²²ggg½½hhhÊÊËËËËËËÌÌ\026\026\026\026\026\026ÜÜÜÜÜ"+
                    "³³³³½½½hhhhhwËËËËËÌÌÌ\026\026\026\026\026\026ÜÜÜÜÜ³³³³XXXXhhhhhttËËËÌÌÌÌ\026\026\026\026\026ÜÜÜÜÜ³³³³XXXXXXhÉÉttttÍÍÍÍÏÏÏÏÏÏÎÎÎÎÎ´´´´XXXXXXÉÉÉtttÍÍÍÍÍÏÏÏÏÏÏÐÎÎÎÎ"+
                    "´´´´´XXffffÉÉtttÍÍÍÍÍÏÏÏÏÏÐÐÐÐÎÎ´´±±±±ffffffiiiiÍÍÍÍÍÏÏÏÏÏÐÐÐÐÐ×±±±±±±ffffffiiiiiÍÍÍÏÏÏÏÏÐÐÐÐÐÐ×++±±±±f[¼¼¼¼iiii\020\020ÍÍÏÏÏÏÐÐÐÐÐÐÐ×"+
                    "µµµµµ¼¼¼¼¼¼¼¼¼¾¾¾¾¾¾ÏÏÏÏÐÐÐÐÐÐ××µµµµµ¼¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾ÏÏÐÐÐÐÐÈÈ××µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈ×µµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾¾ÈÈÈÈÈÈÈÈÈÈ"+
                    "µµµµµµ¼¼¼¼»»»¾¾¾¾¾¾¾¾\021\021ÈÈÈÈÈÈÈÈÒµµµµµ,,,»»»»»¾¾¾¾¾¾¿¿\021\021\021\021ÈÈÈÈÈÈÖµºººº,,,»»»»»»¾¿¿¿¿¿¿\021\021\021\021\021ÈÈÈÖÖÖººººº,,,,»»»»»¿¿¿¿¿¿¿\021\021\021\021\021\021\021ÖÖÖÖ"+
                    "¶¶ººº,,,,,»»»À¿¿¿¿¿¿¿\021\021\021\021\021ÇÇÖÖÖÖ¶¶¶¶¶º,,,,,ÀÀÀÀ¿¿¿¿¿¿Á\021\021ÇÇÇÇÇÖÖÖ¶¶¶¶¶¶,,,,ÀÀÀÀÀÀ¿¿¿ÁÁÁÁÇÇÇÇÇÇÇÖÖ·······,,ÀÀÀÀÀÀÀÀÁÁÁÁÁÁÁÇÇÇÇÇÇÇÖ"+
                    "········¹¹ÀÀÀÀÀÀÁÁÁÁÁÁÁÁÇÇÇÇÇÇ\022\022·······¹¹¹¹¹ÀÀÀÀÁÁÁÁÁÁÁÁÁÇÇÇÇ\022\022\022·······¹¹¹¹¹¹ÀÀÀÁÁÁÁÁÁÁÁÁÇÇÇ\022\022\022\022--·····¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÁÁÇÇ\022\022\022\022\022"+
                    "ôôôôóóóóßßßßßßßßÞÞÝÝÝÝ\025\025\025\002ôôôôôóóóßßßßßßßßÞÞÝÝÝÝÝ\025\025W\002ôôôôôóóóßßßßßßßßÞÝÝÝÝÝÝÝ\025WWWvvvôô\030\030óßßßßßßßßßÞÝÝÝÝÝÝÝÝ"+
                    "WWW\003\003\003\003vvvÊÊÊÊËßßßßßßßßÝÝÝÝÝÝÝÜÜ²²²\003\003\003\003vvÊÊÊÊÊËËËßßßß\026\026\026\026ÝÝÝÝÜÜÜ²²²ggg\004\004\004ÊÊÊwwËËËËËË\026\026\026\026\026\026ÝÜÜÜÜÜ²²²²gg\004\004hhhwwwËËËËËË\026\026\026\026\026\026\026ÜÜÜÜÜ"+
                    "³³³³IIXhhhhwwwËËËËËÌ\026\026\026\026\026\026\026ÜÜÜÜÜ³³³³XXXXhhhhwtttttÍÍ\026\026\026\026\026\026\026ÜÜÜÜÜ³³³³XXXXXXhhtttttÍÍÍÍÍ\026\026\026\026\026ÜÜÜÜÚ³³´´XXXXXYYtttttÍÍÍÍÍÍÏÏÏÏÏÐÚÚÚÚ"+
                    "´±±±±XYYYf[[ttttÍÍÍÍÍÏÏÏÏÏÐÐÐÐÚÚ±±±±±±[[[[[[iiiiÍÍÍÍÍÏÏÏÏÐÐÐÐÐÐÚ±±±±±±[[[[[[iiiiiÍÍÍÍÏÏÏÏÐÐÐÐÐÐÐ±±±±±±[[[[[[iiiiiÍÍÍÍÏÏÏÐÐÐÐÐÐÐ×"+
                    "µµµ±±±¼¼¼¼¼¼¼iiii¾¾ÍÍÏÏØÐÐÐÐÐÐÐ×µµµµµ¼¼¼¼¼¼¼¼¼¾¾¾¾¾¾¾ØØØÐÐÐÐÐÐÐ×µµµµµ¼¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾ØØÈÈÈÈÈÈÈÈÒµµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾\021ÈÈÈÈÈÈÈÈÒÒ"+
                    "µµµµµ,,,¼¼¼¼¼¾¾¾¾¾¾¾\021\021\021\021ÈÈÈÈÈÈÒÒµµµµ,,,,,,»»»¾¾¾¾¾¾¿\021\021\021\021\021\021ÈÈÈÈÒÒµµºº,,,,,,,»»»¾¾¿¿¿¿\021\021\021\021\021\021\021ÈÈÒÒÒºººº,,,,,,,,»»¿¿¿¿¿¿\021\021\021\021\021\021\021\021ÖÖÖÖ"+
                    "¶¶¶º,,,,,,,,,À¿¿¿¿¿¿\021\021\021\021\021\021\021\021ÖÖÖÖ¶¶¶¶¶,,,,,,,ÀÀÀ¿¿¿¿¿Á\021\021\021\021\021ÇÇÇÖÖÖ·····,,,,,,ÀÀÀÀÀ¿¿ÁÁÁÁÁÁÇÇÇÇÇÇÅÅ······,,,¹¹¹ÀÀÀÀÁÁÁÁÁÁÁÁÇÇÇÇÇÇÅÅ"+
                    "·······¹¹¹¹¹¹¹ÀÀÁÁÁÁÁÁÁÁÁÇÇÇÇÇÅÅ·······¹¹¹¹¹¹¹¹ÀÁÁÁÁÁÁÁÁÁÇÇÇÇ\022\022\022·······¹¹¹¹¹¹¹¹¹ÂÂÁÁÁÁÁÁÁÁÇÇ\022\022\022\022-······¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÂÂÇ\022\022\022\022\022"+
                    "ôôôôóóóóóßßßßßáááááÝÝÝ\025\025\025ôôôôóóóóßßßßßßááááÝÝÝÝÝ\025\025ôôôôôóóóßßßßßßááááÝÝÝÝÝÝ\025ôôôôóóóßßßßßßáááÝÝÝÝÝÝÝÜ"+
                    "\003\003ÊÊÊñßßßßßßáááÝÝÝÝÝÜÜÜ²²HHH\003wwwwËËËßßßß\026\026\026\026\026ÝÝÜÜÜÜ²²²HHH\004\004\004wwwwwËËËË\026\026\026\026\026\026\026\026ÜÜÜÜÜ²²²HH\004\004\004\004wwwwwxËËËË\026\026\026\026\026\026\026\026ÜÜÜÜÜ"+
                    "³³³III\004\004hhwwwwxxxxË\026\026\026\026\026\026\026\026ÜÜÜÜÜ³³³IIIXXhhhwwtttttÍÍ\026\026\026\026\026\026\026ÜÜÜÜÜ³³³³IXXYYYYttttttÍÍÍÍ\026\026\026\026\026\026ÜÜÜÚÚ³³±±YYYYYYYttttttÍÍÍÍÍÏÏÏÏÐÐÚÚÚÚ"+
                    "±±±±±YYYY[[[ttttÍÍÍÍÍÍÏÏÏÏÐÐÐÚÚÚ±±±±±±[[[[[[iiiiÍÍÍÍÍÍÏÏÏÐÐÐÐÐÚÚ±±±±±±[[[[[[iiiiiÍÍÍÍÍÏÏÏÐÐÐÐÐÐÚ±±±±±±[[[[[[iiiiiiÍÍÍÏØØØÐÐÐÐÐÐÐ"+
                    "µ±±±±±[[[¼¼¼iiiiiiÍÍÍØØØØÐÐÐÐÐÐÐµµµµ±¼¼¼¼¼¼¼¼ii¾¾¾¾¾ØØØØØØÐÐÐÐÒÒµµµµµ¼¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾rrrrÈÈÈÈÒÒÒµµµµµµ¼¼¼¼¼¼¼¾¾¾¾¾¾¾¾rrrrÈÈÈÈÒÒÒ"+
                    "µµµµµ,,,,,¼¼¼¾¾¾¾¾¾¾\021\021\021\021\021ÈÈÈÈÒÒÒµµµµ,,,,,,,,»¾¾¾¾¾¾\021\021\021\021\021\021\021\021ÈÒÒÒÒµµµ,,,,,,,,,,»¾¾¿¿¿\021\021\021\021\021\021\021\021\021ÒÒÒÒ¶ºº,,,,,,,,,,,^¿¿¿¿\021\021\021\021\021\021\021\021\021\021ÒÒÒ"+
                    "¶¶¶,,,,,,,,,,,¿¿¿¿¿\021\021\021\021\021\021\021\021\021\021ÔÔÔ¶¶¶¶,,,,,,,,,ÀÀ¿¿¿¿Á\021\021\021\021\021\021\021\021ÇÔÔÔ·····,,,,,,¹¹¹ÀÀÁÁÁÁÁÁÁ\021\021\021ÇÇÇÅÅÅ······,,,¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁÇÇÇÇÅÅÅ"+
                    "·······¹¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁÇÇÇÅÅÅÅ······¹¹¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁÁÇÇÅÅÅÅ······¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÁÁÁÁÇÇÅÅÅÅ······¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÂÂÂÇ\022\022\022\022"+
                    "ôôôôóóóóóóßßßßáááááâââââ\025\025ôôôôôóóóóóßßßßáááááâââââ\025\025ôôôôóóóóñßßßßáááááâââÝÝÝ\025ôôôóóññßßßßáááááâÝÝÝÝÜÜ"+
                    "HwñññßßßßáááááÝÝÝÜÜÜÜ²²HHHHwwwñßßß\026\026\026\026\026\026\026ÜÜÜÜÜ²²HHHH\004\004wwww\026\026\026\026\026\026\026\026ÜÜÜÜÜ²²²HII\004\004\004wwwwwxxxxx\026\026\026\026\026\026\026\026ÜÜÜÜÜ"+
                    "²³IIII\004\004\004wwwwxxxxxx\026\026\026\026\026\026\026\026ÜÜÜÜÜ³³IIIIVV\005\005\005wxxxxxxyÍ\026\026\026\026\026\026\026ÜÜÜÜÜ¤¤¤IVVYYYY\005\005tttttÍÍÍÍ\026\026\026\026\026\026ÜÚÚÚÚ¤¤±±VYYYYYYttttttÍÍÍÍÍÍ\026\026\026\026ÚÚÚÚÚ"+
                    "±±±±±YYYY[ZZttttÍÍÍÍÍÍÏÏÏÏÐÐÚÚÚÚ±±±±±±[[[[[[iiiiiÍÍÍÍÍÏÏØØÐÐÐÚÚÚ±±±±±±[[[[[[iiiiiÍÍÍÍÍØØØØÐÐÐÐÐÚ±±±±±±[[[[[[iiiiiiÍÍÍØØØØØÐÐÐÐÐÐ"+
                    "±±±±±±[[[[[eeiiiiissØØØØØØØÐÐÐÐÒµµ±±±UU¼¼¼¼\\eeiiiissØØØØØØØÐÐÒÒÒµµµµµU¼¼¼¼¼\\\\\\¾¾¾¾¾¾rrrrrrrrÒÒÒÒµµµµµ,¼¼¼¼\\\\\\\\¾¾¾¾¾¾jrrrrrrÈÒÒÒÒ"+
                    "µµµµ,,,,,,,\\\\\\¾¾¾¾¾jj\021\021\021\021\021ÈÒÒÒÒÒµµµ,,,,,,,,,,¾¾¾¾¾j\021\021\021\021\021\021\021\021ÒÒÒÒÒ°°°,,,,,,,,,,,^^^^\021\021\021\021\021\021\021\021\021\021ÒÒÒÒ°°,,,,,,,,,,,,^^^^^\021\021\021\021\021\021\021\021\021ÔÔÔÔ"+
                    "¶¶¶,,,,,,,,,,,^^^^^\021\021\021\021\021\021\021\021\021ÔÔÔÔ¶¶¶,,,,,,,,,,¹^^^^ÁÁ\021\021\021\021\021\021\021\021ÔÔÔÔ····,,,,,,,¹¹¹¹^ÁÁÁÁÁÁ\021\021\021\021\021\021ÅÅÅÅ·····,,,¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁ\021ÇÅÅÅÅÅ"+
                    "······¹¹¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁÁÇÅÅÅÅÅ······¹¹¹¹¹¹¹¹¹¹ÂÁÁÁÁÁÁÁÁÁÇÅÅÅÅÅ······¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÂÃÅÅÅÅÅ······¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÂÃÃÅÅÅÅ"+
                    "ôôôôóóóóóóóßßááááááââââââåôôôôóóóóóóñßßááááááâââââââõõôôôóóóñññßßááááááâââââââôôóñññññßááááááâââââÜÜ"+
                    "HññññññßááááááâââÜÜÜÜHHHHwwñññáá\026\026\026\026\026\026ÜÜÜÜÜ²²HHHH\004\004ww\026\026\026\026\026\026\026\026ÜÜÜÜÜ²²IIII\004\004www\026\026\026\026\026\026\026\026ÜÜÜÜÜ"+
                    "¤¤IIIII\004\005\005wwwxxxxxyy\026\026\026\026\026\026\026ÜÜÜÜÜ¤¤¤IIVVV\005\005\005\005xxxxxyyy\026\026\026\026\026\026\026ÜÜÜÜÜ¤¤¤¤VVVVY\005\005\005tttttyyyy\026\026\026\026\026\026ÚÚÚÚÚ¤¤¤¤VVYYYYZZtttttyÍÍÍÍ\026\026\026\026\026ÚÚÚÚÚ"+
                    "±±±±±YYYYZZZttttÍÍÍÍÍÍÍØØØØÚÚÚÚÚ±±±±±±[[[[[ZiiiiiÍÍÍÍÍØØØØØØÚÚÚÚ±±±±±±[[[[[[iiiiisssÍØØØØØØØÐÐÚÚ±±±±±±U[[[[eeiiiissssØØØØØØØÐÐÐÚ"+
                    "±±±±±UUUU[eeeeiiissssØØØØØØØØÐÒÒ±±±±±UUUU\\\\\\eeeiisssrrrrrrØØØÒÒÒµµµµUUUU\\\\\\\\\\\\\\\\¾ssjrrrrrrrrÒÒÒÒ°°°°°UU\\\\\\\\\\\\\\\\¾¾¾jjjrrrrrrrÒÒÒÒ"+
                    "°°°°,,,,,,\\\\\\\\\\^^jjjjj\021\021\021rrÒÒÒÒÒ°°°°,,,,,,,,,^^^^^jjj\021\021\021\021\021\021ÒÒÒÒÒ°°°,,,,,,,,,,^^^^^^j\021\021\021\021\021\021\021\021ÒÒÒÒ°°°,,,,,,,,,,^^^^^^\021\021\021\021\021\021\021\021\021ÔÔÔÔ"+
                    "¯¯¯,,,,,,,,,,^^^^^^\021\021\021\021\021\021\021\021\021ÔÔÔÔ¯¯¯,,,,,,,,,,^^^^^^\021\021\021\021\021\021\021\021\021ÔÔÔÔ····,,,,,,¹¹¹¹¹^^^ÁÁÁÁ\021\021\021\021\021\021ÅÅÅÅ····,,,,¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁ\021\021\021ÅÅÅÅÅ"+
                    "·····¹¹¹¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÁÁÅÅÅÅÅÅ·····¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÁÁÁÁÃÃÅÅÅÅÅ·····¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÃÃÃÅÅÅÅ·····¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÂÃÃÃÅÅÅÅ"+
                    "\"\"\"\"\"\"õôôôóóóóóóññáááááááââââââå\"\"\"\"\"õõõôôóóóóóñññáááááááââââââå\"\"\"õõõõôôóóóññññáááááááâââââââ\"õõõõõõòòññññññááááááââââââÜ"+
                    "HòññññññááááááââââÜÜÜHHHwññññááá\026\026\026\026\026ÜÜÜÜÜ£££HHHww\026\026\026\026\026\026\026\026ÜÜÜÜÜ£££III==www\026\026\026\026\026\026\026\026ÜÜÜÜÜ"+
                    "¤¤¤IIII=\005\005\005wxxxxxxyy\026\026\026\026\026\026\026ÜÜÜÜÜ¤¤¤IIVVV\005\005\005\005xxxxxyyyy\026\026\026\026\026\026ÜÜÜÚÚ¤¤¤¤VVVV\005\005\005\006xxxxyyyyy\026\026\026\026\026\026ÚÚÚÚÚ¤¤¤¤VVVYYZZ\006\006tttyyyyyy\026\026\026\026ÚÚÚÚÚÚ"+
                    "¥±±±±VYYZZZZZtttyyyÍÍÍØØØØØÚÚÚÚÚ±±±±±±U[ZZZZZiiisssssÍØØØØØØÚÚÚÚ±±±±±±UU[[[eeiiisssssØØØØØØØØÚÚÚ±±±±±UUUU[eeeeiisssssØØØØØØØØØÚÚ"+
                    "±±±±±UUUUUeeeeeisssssØØØØØØØØØÒÒ±±±±UUUUU\\\\\\\\eeessssrrrrrrrrrÒÒÒ°°°°UUUU\\\\\\\\\\\\\\\\333jrrrrrrrrÒÒÒÒ°°°°°UU\\\\\\\\\\\\\\\\\\]jjjjjrrrrrrÒÒÒÒ"+
                    "°°°°°,,,,\\\\\\\\\\]]^jjjjjjjrrrÒÒÒÒÒ°°°°,,,,,,,,\\]^^^^jjjj\021\021\021\021\021ÒÒÒÒÒ°°°°,,,,,,,,,^^^^^^jj\021\021\021\021\021\021\021ÒÒÒÒ°°°,,,,,,,,,,^^^^^^^\021\021\021\021\021\021\021\021ÔÔÔÔ"+
                    "¯¯¯,,,,,,,,,,^^^^^^^\021\021\021\021\021\021\021\021ÔÔÔÔ¯¯¯¯,,,,,,,,,^^^^^^^\021\021\021\021\021\021\021\021ÔÔÔÔ¯¯¯¯,,,,,,¹¹¹¹^^^^^ÁÁ\021\021\021\021\021\021ÅÅÅÅÅ¯¯¯¯,,,,¹¹¹¹¹¹¹¹^ÁÁÁÁÁÁÁ\021\021ÅÅÅÅÅÅ"+
                    "·····¹¹¹¹¹¹¹¹¹¹¹¹ÁÁÁÁÁÁÁÁÃÅÅÅÅÅÅ·····¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÃÃÃÅÅÅÅÅ····¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÃÃÃÃÅÅÅÅ····¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÂÃÃÃÃÃÅÅÅ"+
                    "\"\"\"\"\"\"õõôóóóóóóóññááááááââââââåå\"\"\"\"õõõõõóóóóññññááááááâââââââå\"\"\"\"õõõõõòòòòñññññáááááâââââââå\"\"\"\"õõõõõòòòññññññáááááâââââââÜ"+
                    "\"\"\"\"õõõõõòòññññññáááááâââââÜÜÜ££££ññññáááá\026\026âââÜÜÜÜ£££££\026\026\026\026\026\026\026\026ÜÜÜÜÛ££££I====wy\026\026\026\026\026\026\026ÛÛÛÛÛ"+
                    "¤¤¤III===\005\005\005yyy\026\026\026\026\026\026\026ÛÛÛÛÛ¤¤¤¤IVVV\005\005\005\005xxxxxyyyy\026\026\026\026\026\026ÛÛÛÛÛ¤¤¤¤VVVV\005\005\005\006\006xxxyyyyyy\026\026\026\026\026ÛÚÚÚÚ¤¤¤¤VVVVZZ\006\006\006\006tyyyyyyyy\026\026\026ÚÚÚÚÚÚ"+
                    "¥¥¥±±VVZZZZZ\006\006tyyyyyyyzØØØØÚÚÚÚÚ¥¥±±±±UUZZZZZiisssssszØØØØØØÚÚÚÚ¥±±±±UUUUUeeeeisssssssØØØØØØØÚÚÚ±±±±±UUUUUeeeeessssssØØØØØØØØÙÙÚ"+
                    "±±±±UUUUUU\\eeee3sssssØØØØØØØØØÒÒ°°±±UUUUU\\\\\\\\\\e333ssrrrrrrrrrÒÒÒ°°°°UUUU\\\\\\\\\\\\\\3333jjrrrrrrrÒÒÒÒ°°°°°UU\\\\\\\\\\\\\\\\]]jjjjjrrrrrrÒÒÒÒ"+
                    "°°°°°°,,\\\\\\\\\\]]]]jjjjjjÑÑÑÑÒÒÒÒÒ°°°°°,,,,,,\\]]]^^^jjjjjj\021ÑÑÒÒÒÒÒ°°°°,,,,,,,,]^^^^^^jjjj\021\021\021\021\021ÔÔÔÔ¯¯¯¯,,,,,,,,^^^^^^^^j\021\021\021\021\021\021ÔÔÔÔÔ"+
                    "¯¯¯¯,,,,,,,,^^^^^^^^\021\021\021\021\021\021\021ÔÔÔÔÔ¯¯¯¯,,,,,,,,^^^^^^^^\021\021\021\021\021\021\021ÔÔÔÔÔ¯¯¯¯,,,,,,¹¹¹¹^^^^^^\021\021\021\021\021\021\021ÅÅÅÅÅ¯¯¯¯¯,,¹¹¹¹¹¹¹¹¹^^ÁÁÁÁÁ\021\021\021ÅÅÅÅÅÅ"+
                    "¯¯¯¯¯¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÁÁÁÃÃÃÃÅÅÅÅÅ¯¯··¹¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÃÃÃÃÃÅÅÅÅ····¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÃÃÃÃÃÅÅÅÅ····¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÂÂÃÃÃÃÃÃÅÅÅ"+
                    "\"\"\"\"\"õõõóóóóóóñññááááááââââââåå\"\"\"\"õõõõõòòòòññññááááááââââââåå\"\"\"\"õõõõõòòòòñññññáááááâââââââå\"\"\"õõõõõòòòòñññññáááááâââââââå"+
                    "\"\"\"õõõõõòòòññññññáááááââââââÛÛ££££òññññáááááââââÛÛÛÛ££££££===\026\026\026\026\026\026ÛÛÛÛÛÛ£££££======y\026\026\026\026\026\026ÛÛÛÛÛÛ"+
                    "¤¤¤£I=====\005\005yyyy\026\026\026\026\026ÛÛÛÛÛÛ¤¤¤¤¤VV=\005\005\005\006\006xxxyyyyy\026\026\026\026\026ÛÛÛÛÛÛ¤¤¤¤¤VVV\005\005\006\006\006\006xxyyyyyy\026\026\026\026ÛÛÛÛÚÚ¥¤¤¤¤VVVZZ\006\006\006\006\006yyyyyyyzz\026{ÚÚÚÚÚÚ"+
                    "¥¥¥¥¤VGZZZZ\006\006\006\007yyyyyyzzzØØ{ÙÚÚÚÚ¥¥¥¥±UUUZZZZ\006\007\007sssssszzØØØØÙÙÙÚÚ¥¥¥±±UUUUUeeee\007sssssszØØØØØØÙÙÙÙ¥¥±±UUUUUUeeeeesssssszØØØØØØÙÙÙÙ"+
                    "**±UUUUUUU\\eeee333sssrrrrrrrrÙ\024\024°°°°UUUUU\\\\\\\\\\\\33333rrrrrrrrrÒÒÒ°°°°°UUU\\\\\\\\\\\\\\3333jjrrrrrrrrÒÒÒ°°°°°°U\\\\\\\\\\\\\\]]]2jjjjÑÑÑrrrÒÒÒÒ"+
                    "°°°°°°,\\\\\\\\\\]]]]]jjjjjjÑÑÑÑÑÒÒÒÒ°°°°°°,,,,\\]]]]]^^jjjjjjÑÑÑÑÒÒÒÒ°°°°°,,,,,,]]]^^^^^jjjjj\021\021\021ÔÔÔÔÔ¯¯¯¯¯,,,,,,,^^^^^^^^jjj\021\021\021\021ÔÔÔÔÔ"+
                    "¯¯¯¯¯,,,,,,,^^^^^^^^j\021\021\021\021\021\021ÔÔÔÔÔ¯¯¯¯¯,,,,,,,^^^^^^^^^\021\021\021\021\021\021ÔÔÔÔÔ¯¯¯¯¯,,,,¹¹¹¹^^^^^^^^\021\021\021\021\021ÆÆÅÅÅÅ¯¯¯¯¯¯,¹¹¹¹¹¹¹¹^^^^^ÁÁÁ\021ÃÃÅÅÅÅÅÅ"+
                    "¯¯¯¯¯¹¹¹¹¹¹¹¹¹¹¹¹ÂÂÂÂÂÃÃÃÃÃÅÅÅÅÅ¯¯¯¯¹¹¹¹¹¹¹¹¹¹¹¹¸ÂÂÂÂÂÃÃÃÃÃÃÅÅÅÅ¯¯¯¯¹¹¹¹¹¹¹¹¹¹¹¸¸ÂÂÂÂÂÃÃÃÃÃÃÃÅÅÅ···¹¹¹¹¹¹¹¹¹¹¹¸¸¸ÂÂÂÂÂÃÃÃÃÃÃÃÅÅÅ"+
                    "!!\"\"\"\"õõõòòòòòò\031\031\031\031ááááââââââååå\"\"\"õõõõòòòòòòññññááááâââââââåå\"\"\"õõõõõòòòòñññññááááâââââââåå\"\"\"õõõõõòòòòñññññááááââââââââå"+
                    "\"\"õõõõõòòòòñññññááááâââââââÛÛ£££££=òòòññññññáááâââââÛÛÛÛ££££££=====á\026\026\026ãããÛÛÛÛÛ£££££======y\026\026\026\026\026ãÛÛÛÛÛÛ"+
                    "¤¤£££=====>yyyy\026\026\026\026\026ÛÛÛÛÛÛ¤¤¤¤¤>>>>>\006\006\006yyyyyy\026\026\026\026ÛÛÛÛÛÛ¤¤¤¤¤GGGG\006\006\006\006\006yyyyyyyz\026\026ÛÛÛÛÛÛ¥¥¥¤GGGGG\006\006\006\006\006\006yyyyyyzzz{{{ÙÙÚÚÚ"+
                    "¥¥¥¥¥GGGGZ\006\006\006\007\007\007yyyyzzzz{{{ÙÙÙÙÚ¥¥¥¥JJJJJZZ\006\007\007\007\007sssszzzz{{{ÙÙÙÙÙ¥¥¥¥JJJJUUee\007\007\007\007sssszzz{{{{{ÙÙÙÙ****UUUUUUeee\007\007333sszzz{{{{{ÙÙÙÙ"+
                    "****UUUUUU\\\\ee333333zzrrrrrrÙ\024\024\024****UUUUU\\\\\\\\\\3333332rrrrrrrr\024\024\024°°°°°UUU\\\\\\\\\\\\\\33322jÑÑÑÑrrrrÒÒÒ°°°°°°U\\\\\\\\\\\\]]]]22jjjÑÑÑÑÑÑÒÒÒÒ"+
                    "°°°°°°°\\\\\\\\\\]]]]]]jjjjjÑÑÑÑÑÒÒÒÒ°°°°°°,,,\\]]]]]]]^jjjjjjÑÑÑÑÒÒÒÒ°°°°°°,,,,]]]]]^^^^jjjjjjÑÑÔÔÔÔÔ¯¯¯¯¯,,,,,,]^^^^^^^^jjjj\021\021\021ÔÔÔÔÔ"+
                    "¯¯¯¯¯¯,,,,,^^^^^^^^^jjj\021\021\021ÆÔÔÔÔÔ¯¯¯¯¯¯,,,,,^^^^^^^^^^\021\021\021\021\021ÆÆÔÔÔÔ¯¯¯¯¯¯,,,¹¹¹¹^^^^^^^^\021\021\021\021ÆÆÆÆÆÔÔ¯¯¯¯¯¯¹¹¹¹¹¹¹¹^^^^^^^ÃÃÃÃÃÆÆÆÅÅÅ"+
                    "¯¯¯¯¯®¹¹¹¹¹¹¹¹¹¸¸¸ÂÂÂÃÃÃÃÃÃÃÅÅÅÅ¯¯¯¯®¹¹¹¹¹¹¹¹¹¸¸¸¸ÂÂÂÃÃÃÃÃÃÃÅÅÅÅ¯¯®®®¹¹¹¹¹¹¹¹¸¸¸¸¸ÂÂÂÃÃÃÃÃÃÃÃÅÅÅ¯®®®¹¹¹¹¹¹¹¹¸¸¸¸¸¸ÂÂÂÃÃÃÃÃÃÃÃÃÅÅ"+
                    "!!!!\"\"õõõòòòòò\031\031\031\031\031\031áááâââââåååå\"\"\"õõõõòòòòòò\031\031\031\031ááááââââââååå\"\"õõõõòòòòòòññññááááââââââååå\"\"õõõõòòòòòòññññááááâââââââåå"+
                    "££õõõõõòòòòññññññáááâââââââÛÛ£££££õõ==òòòòññññññáááãããããÛÛÛÛ££££££>>>>>áãããããããÛÛÛÛ#££££>>>>>>\026ãããããÛÛÛÛÛ"+
                    "##£££>>>>>>\026ãããÛÛÛÛÛÛ#¤¤¤>>>>>>>\006ÛÛÛÛÛÛ¥¥¤¤GGGGGG\006\006\006zÛÛÛÛÛ¥¥¥¥GGGGGG\006\006\006\006\007zzzÙÙÙÙÙÚ"+
                    "¥¥¥¥GGGGGG\006\006\007\007\007\007zzzzz{{{ÙÙÙÙÙ¥¥¥¥JJJJJJ44\007\007\007\007\007sszzzzz{{{ÙÙÙÙÙ¥¥¥¥JJJJJJ44\007\007\007\0073sszzzz{{{{ÙÙÙÙÙ****JJJJJJJ4\007\007\0073333zzzz{{{{{ÙÙÙ\024"+
                    "****JJUUUTTTTT333333zz{{{{{{Ù\024\024\024****UUUUTTTTTT3333322ÑÑrrrrr\024\024\024\024°°°°°UUTTTTTTTT332222ÑÑÑÑÑÑÑÑ\024\024\024°°°°°°TTTTTTT]]]2222jjÑÑÑÑÑÑÑÒÒÒ"+
                    "°°°°°°°TTTT]]]]]]]jjjjjÑÑÑÑÑÑÒÒÒ°°°°°°°,TT]]]]]]]]jjjjjjÑÑÑÑÑÒÒÒ°°°°°°,,SS]]]]]]^^^jjjjjÑÑÑÑÔÔÔÔ¯¯¯¯¯¯,,SSS]]^^^^^^^jjjjjkkÔÔÔÔÔ"+
                    "¯¯¯¯¯¯¯,SSSS^^^^^^^^jjjkkkÆÆÆÔÔÔ¯¯¯¯¯¯¯,SSSS^^^^^^^^^jkkkkÆÆÆÆÔÔ¯¯¯¯¯¯¯,SS¹¹^^^^^^^^^kkkkÆÆÆÆÆÆÆ¯¯¯¯¯®®¹¹¹¹¹¹¹^^^^^^_ÃÃÃÃÆÆÆÆÆÆÅ"+
                    "¯¯¯¯®®®¹¹¹¹¹¹¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÆÆÆÅÅ¯¯®®®®¹¹¹¹¹¹¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÅÅÅ¯®®®®­¹¹¹¹¹¹¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÅÅÅ®®®®®­¹¹¹¹¹¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÃÅÅ"+
                    "!!!!!ÿÿÿÿòòòò\031\031\031\031\031\031\031\031ððâââââåååå!!!!\"ÿÿÿÿòòòòò\031\031\031\031\031\031áððâââââåååå\"\"ÿÿÿÿòòòòòò\031\031\031\031\031ððððâââââååå\"õõõõòòòòòòññññáððððâââââååå"+
                    "££õõõõòòòòòòñññññððððâââãããÛå£££££>>>>òòòññññððãããããããÛÛÛ##£££>>>>>>ãããããããããÛÛÛ###££>>>>>>ãããããããÛÛÛÛ"+
                    "####>>>>>>>ãããããÛÛÛÛÛ####>>>>>>>ÛÛÛÛÛ¥¥¥¤GGGGGGG\006ÛÛÛÛÛ¥¥¥¥GGGGGGG\006\006\007\007zzÙÙÙÙÙ"+
                    "¥¥¥¥GGGGGG444\007\007\007zzzzz{{{ÙÙÙÙÙ¥¥¥¥JJJJJJ444\007\007\007\007zzzzz{{{{ÙÙÙÙÙ****JJJJJJ444\007\007\00733zzzzz{{{{ÙÙÙÙÙ****JJJJJJ444\007\007\b333zzzz{{{{{ÙÙ\024\024"+
                    "****JJJJJTTTTT\b33333zz{{{{{{\024\024\024\024*****JJTTTTTTT\b3332222ÑÑÑÑ{{\024\024\024\024°°°°°UTTTTTTTTT322222ÑÑÑÑÑÑÑ\024\024\024\024°°°°°°TTTTTTT]]]22222jÑÑÑÑÑÑÑ\024\024\024"+
                    "°°°°°°°TTTT]]]]]]22jjjjÑÑÑÑÑÑÓÓÓ°°°°°°°SSS]]]]]]]ddjjjjÑÑÑÑÑÓÓÓÓ°°°°°°SSSSS]]]]]^dddjjjjqqqqÓÓÓÓ¯¯¯¯¯¯SSSSSS]]^^^^ddjjjkkkkkÆÔÔÔ"+
                    "¯¯¯¯¯¯¯SSSSSS^^^^^^__jkkkkkÆÆÆÆÔ¯¯¯¯¯¯¯SSSSSS^^^^^^__kkkkkÆÆÆÆÆÆ¯¯¯¯¯®®®SSSSS^^^^^___kkkkkÆÆÆÆÆÆ¯¯¯¯®®®®­­¹¹¸¸¸^^____kkkkÆÆÆÆÆÆÆ"+
                    "¯¯®®®®®­­­¹¹¸¸¸¸¸¸¸_`ÃÃÃÃÃÃÆÆÆÆÆ®®®®®®­­­­¹¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÆÆÄÄ®®®®®­­­­­¸¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÃÄÄ®®®®®­­­­¸¸¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÃÄÄ"+
                    "!!!!!ÿÿÿÿÿòò\031\031\031\031\031\031\031\031\031ððððââååååå!!!!ÿÿÿÿÿÿòòò\031\031\031\031\031\031\031ððððððââåååå!!!!ÿÿÿÿÿÿòòòò\031\031\031\031\031\031ððððððââååååÿÿÿÿÿÿòòòòò\031\031\031\031ðððððððâââååå"+
                    "£ÿÿÿÿÿÿòòòòòñññöððððððãããããåå##££££>>>þþþððððãããããããÛÛ###££>>>>>þããããããããããÛÛ####>>>>>>>ããããããããÛÛÛ"+
                    "####>>>>>>>ããããããÛÛÛÛ####>>>>>>??ÛÛÛÛ####GGGGGG???ÛÛÛÛ¥¥¥¥GGGGGG???4\007zÙÙÙÙ"+
                    "¥¥¥¥GGGGGG4444\007\007zzzzz{{{ÙÙÙÙÙ****JJJJJJ4444\007\007\007zzzzz{{{{ÙÙÙÙÙ****JJJJJJ4444\007\b\b\bzzzzz{{{{ÙÙÙÙÙ****JJJJJJ¦444\b\b\b\b3zzzz{{{{{ÙÙ\024\024"+
                    "*****JJJJTTT¦\b\b\b\b\b322z{{{{{{\024\024\024\024*****JJTTTTTTT\b\b\b22222||||||\024\024\024\024***°°JTTTTTTTT\b2222222ÑÑ||||\024\024\024\024°°°°°°TTTTTTT]]]222222ÑÑÑÑÑÑÑÓÓÓ"+
                    "°°°°°°°TTTT]]]]]]d22jjÑÑÑqqqÓÓÓÓ°°°°°°SSSSS]]]]]ddddjjjqqqqqÓÓÓÓ°°°°°°SSSSSS]]]]dddddjjqqqqqÓÓÓÓ¯¯¯¯¯¯SSSSSSS]]^dddddjkkkkkkÆÓÓÓ"+
                    "¯¯¯¯¯¯SSSSSSSS^^_____kkkkkkÆÆÆÆÆ¯¯¯¯¯®®SSSSSSS^______kkkkkkÆÆÆÆÆ¯¯¯¯®®®®SSSSSS^______kkkkkÆÆÆÆÆÆ¯¯®®®®®­­­­­¸¸¸_____``kkkÆÆÆÆÆÆÆ"+
                    "®®®®®®®­­­­¸¸¸¸¸¸¸¸```ÃÃÃÃÆÆÆÆÆÄ®®®®®®­­­­­¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÆÄÄÄ®®®®®­­­­­¸¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÄÄÄ®®®®­­­­­­¸¸¸¸¸¸¸¸¸¸ÃÃÃÃÃÃÃÃÃÄÄÄ"+
                    "!!!!!ÿÿÿÿÿÿ\031\031\031\031\031\031\031\031\031ðððððððååååå!!!!ÿÿÿÿÿÿÿò\031\031\031\031\031\031\031\031ðððððððååååå!!!!ÿÿÿÿÿÿÿòò\031\031\031\031\031\031ðððððððððåååå!!ÿÿÿÿÿÿÿÿòòòöööööðððððððððåååå"+
                    "ÿÿÿÿÿÿÿþþòòöööööððððððããããããå####ÿÿÿÿþþþþþööööðððããããããããä#####>>>þþþþþöããããããããããää####>>>>>þþþãããããããããää"+
                    "####>>>>>>??ããããããäää####>>>>>????ääää####GGGGG?????äää¢¢¢¢GGGGG?????ÙÙÙÙ"+
                    "¥¥¥¥GGGGG??4444zzzÙÙÙÙÙ****JJJJJF44444\007\bzzzz{{{{ÙÙÙÙÙ****JJJJJFF4444\b\b\b\bzzzz{{{{ÙÙÙÙ\024****JJJJJ¦¦¦¦¦\b\b\b\b\bzzz{{{{{{Ù\024\024\024"+
                    "*****JJJ¦¦¦¦¦¦\b\b\b\b\b22|||||||\024\024\024\024*****JJKKKKKKK\b\b\b22222||||||\024\024\024\024*****KKKKKKKKK\b2222222||||||\024\024\024\024°°°°°°KKKKKKK]]]222222||||||ÓÓÓÓ"+
                    "°°°°°°LLLLKK]]]]ddd22qqqqqqqÓÓÓÓ°°°°°°SSSSSS]]]]dddddqqqqqqqÓÓÓÓ¯¯¯¯¯SSSSSSSS]]ddddddqqqqqqqÓÓÓÓ¯¯¯¯¯¯SSSSSSSS]ddddddkkkkkkkÓÓÓÓ"+
                    "¯¯¯¯¯®SSSSSSSS_______kkkkkkkÆÆÆÆ¯¯¯®®®®SSSSSSS_______kkkkkkÆÆÆÆÆ¯¯®®®®®®SSSSSS______``kkkkkÆÆÆÆÆ®®®®®®®­­­­­­¸_____```kkkkÆÆÆÆÆÆ"+
                    "®®®®®®®­­­­­¸¸¸¸¸¸`````ccÃÆÆÆÄÄÄ®®®®®®­­­­­­¸¸¸¸¸¸¸```ÃÃÃÃÃÄÄÄÄÄ®®®®®­­­­­­¸¸¸¸¸¸¸¸¸.ÃÃÃÃÃÃÃÄÄÄÄ®®®®­­­­­­­¸¸¸¸¸¸¸¸¸.ÃÃÃÃÃÃÃÃÄÄÄ"+
                    "!!!!ÿÿÿÿÿÿÿ\031\031\031\031\031\031\031\031\031ðððððððååååå!!!!ÿÿÿÿÿÿÿÿ\031\031\031\031\031\031\031\031ððððððððåååå!!ÿÿÿÿÿÿÿÿ\031\031\031ööööðððððððððååååÿÿÿÿÿÿÿÿööööööööððððððððãååå"+
                    "ÿÿÿÿÿÿþþþöööööööðððððããããããä####ÿÿÿþþþþþþþööööööðððãããããããää#####>þþþþþþþþööööðãããããããããää#####>>þþþþþþããããããããäää"+
                    "#####>>>þþþ??ããããääää#¢¢¢¢>>>??????ääää¢¢¢¢¢GGG??????äää¢¢¢¢GGGG??????ÙÙä"+
                    "¢¢¢¢GGGG????444zÙÙÙÙ****JJJJFFFF444\bzzz{{ÙÙÙÙÙ****JJJJFFFFF4\b\b\b\b\bzzzz{{{{ÙÙÙÙ\024*****JJJFF¦¦¦¦\b\b\b\b\b\bzz{{{{{{\024\024\024\024"+
                    "*****JJK¦¦¦¦¦¦\b\b\b\b\t\t\t|||||||\024\024\024\024*****JKKKKKKKK\b\b\t\t\t\t\t|||||||\024\024\024\024*****KKKKKKKKKK\t\t\t\t\t\t||||||||\024\024\024§§§§°KKKKKKKKK]\t\t\t\t\t\t\n||||||ÓÓÓÓ"+
                    "°°°°°LLLLLLLL]]ddddd\n\nqqqqqqÓÓÓÓ°°°°¨SSSSSSSS]]ddddddqqqqqqqÓÓÓÓ¯¯¯¯¨SSSSSSSSSdddddddqqqqqqqÓÓÓÓ¯¯¯¯¯®SSSSSSSSddddd__kkkkkkkÓÓÓÓ"+
                    "¯¯¯®®®SSSSSSSS_______kkkkkkkÆÆÆÓ¯¯®®®®®SSSSSSS_______kkkkkkkÆÆÆÆ®®®®®®®®SSSSSS______``kkkkkÆÆÆÆÆ®®®®®®®­­­­­­¸____`````kkkÆÆÆÆÆÄ"+
                    "®®®®®®­­­­­­­¸¸¸¸``````ccclÆÄÄÄÄ®®®®®®­­­­­­¸¸¸¸¸¸````cccclÄÄÄÄÄ®®®®®­­­­­­­¸¸¸¸¸¸¸....ÃÃÃÃÄÄÄÄÄ®®®®­­­­­­­¸¸¸¸¸¸¸¸....ÃÃÃÃÃÄÄÄÄ"+
                    "!!!!ÿÿÿÿÿÿÿ\031\031\031\031\031\031\031\031\031ðððððððååååå!ÿÿÿÿÿÿÿÿ\031\031\031\031\031öööððððððððååååÿÿÿÿÿÿÿÿööööööööððððððððååååÿÿÿÿÿÿÿÿööööööööððððððððãååå"+
                    "ÿÿÿÿÿþþþþöööööööððððððããããääÿÿÿþþþþþþöööööööðððãããããããää####ÿþþþþþþþþþööööööðããããããããäää###¢¢þþþþþþþþþããããããããäää"+
                    "¢¢¢¢¢>þþþþþþþ?ããããääää¢¢¢¢¢¢>???????ääää¢¢¢¢¢GG???????äää¢¢¢¢¢GG???????äää"+
                    "¢¢¢¢¢GG????5555ÙÙÙÙ****JJJFFFFF555@ÙÙÙÙÙ*****JJFFFFFFF@@\b\b{{{ÙÙÙ\024\024*****JJFFFF¦¦¦\b\b\b\b\b|||||\024\024\024\024"+
                    "*****JKKK¦¦¦¦¦\b\b\b\t\t\t\t|||||||\024\024\024\024§§§§§KKKKKKKKKK\t\t\t\t\t\t||||||||\024\024\024§§§§§KKKKKKKKKK\t\t\t\t\t\t\t|||||||\024\024\024§§§§§LLLLLLLKKK\t\t\t\t\t\n\n||||||}ÓÓÓ"+
                    "§¨¨¨¨¨LLLLLLLLL1111\n\n\nqqqqqq}ÓÓÓ¨¨¨¨¨¨LLLLLLLLdddddd\n\nqqqqqq}ÓÓÓ¨¨¨¨¨¨SSSSSSSSddddddd\nqqqqqppÓÓÓ¨¨¨¨®®SSSSSSSSS______kkkkkkppÓÓÓ"+
                    "¯®®®®®®SSSSSSS_______kkkkkkkooÓÓ®®®®®®®SSSSSSS______``kkkkkkoÆÆÆ®®®®®®®®­SSSSS____`````kkkklÆÆÆÄ®®®®®®®­­­­­­­___``````ccclllÄÄÄ"+
                    "®®®®®®­­­­­­­­¸¸``````ccccllÄÄÄÄ®®®®®®­­­­­­­¸¸¸¸`````ccccllÄÄÄÄ®®®®®­­­­­­­¸¸¸¸¸¸......cbblÄÄÄÄ®®®®­­­­­­­­¸¸¸¸¸¸.......bbÄÄÄÄÄ"+
                    "ÿÿÿÿÿÿÿ\031\031\031\031\031\031\031öððððððððååååÿÿÿÿÿÿÿööööööööððððððððååååÿÿÿÿÿÿÿööööööööððððððððååååÿÿÿÿÿÿÿööööööööðððððððððîîî"+
                    "ÿÿÿÿþþþööööööööððððððãããîîîÿÿþþþþþþöööööööððððãããããäää¢¢¢¢¢þþþþþþþþþöööööööããããããããäää¢¢¢¢¢þþþþþþþþþþöö\032ããããããääää"+
                    "¢¢¢¢¢¢þþþþþþþþãããääää¢¢¢¢¢¢þ???????ääää¢¢¢¢¢¢????????ääää¢¢¢¢¢¢??????555äää"+
                    "¡¡¡¡¢¢???555555@æææ¡¡¡¡¡JFFFF5555@@@ÙÙææ*****$FFFFFF5@@@@@{ÙÙ\024\024\024*****$$FFFFF¦@@@@@||||\024\024\024\024"+
                    "§§§§§$$KKK¦¦¦¦@@\t\t\t\t||||||\024\024\024\024§§§§§§KKKKKKKKK\t\t\t\t\t\t||||||||ççç§§§§§§LKKKKKKKK\t\t\t\t\t\t\n||||||}ççç§§§§§LLLLLLLLL11111\n\n\n\n||||}}}ÓÓ"+
                    "§¨¨¨¨¨LLLLLLLLL1111\n\n\n\nqqqq}}}ÓÓ¨¨¨¨¨¨LLLLLLLLM1111\n\n\n\nqqqq}}}ÓÓ¨¨¨¨¨¨SSSSSSSMMMddd\n\n\nqqqppppÓÓÓ¨¨¨¨¨¨SSSSSSSSM______\013kkkpppppÓÓ"+
                    "¨®®®®®®SSSSSSS______``kkkkkooooÓ®®®®®®®®SSSSSS_____````kkkkooooo®®®®®®®®­­SSSS___``````ccklllllÄ®®®®®®®­­­­­­­__```````cccllllÄÄ"+
                    "®®®®®®­­­­­­­­¸```````cccclllÄÄÄ®®®®®­­­­­­­­­¸¸¸```..cccclllÄÄÄ®®®®®­­­­­­­­¸¸¸¸.......bbbllÄÄÄ®®®®­­­­­­­­­¸¸¸¸........bbbÄÄÄÄ"+
                    "ÿýýýýýý÷÷ööööööðïïïïïïïååååÿÿÿÿýýýööööööööðððïïïïïïåååÿÿÿÿÿÿÿööööööööððððïïïïïîîîÿÿÿÿÿÿööööööööööðððïïïïîîîî"+
                    "ÿÿÿÿþþþöööööööööððððïïãîîîîÿþþþþþþþööööööööðððããããîîîî¢¢¢¢þþþþþþþþþöööööö\032\032\032\032ããããääää¢¢¢¢¢ þþþþþþþþþööö\032\032\032\032\032\032ããääää"+
                    "¢¢¢¢¢   þþþþþþþ\032\032\032\032\032äääää¢¢¢¢¢¢   ?????äääää¢¢¢¢¢¢ ??????55ääää¡¡¡¢¢¢????55555ææææ"+
                    "¡¡¡¡¡¡55555555@@@ææææ¡¡¡¡¡$$5555555@@@@ææææ¡¡¡¡$$$$F5555@@@@@ææææ§§§§$$$$$FF5@@@@@@ççç"+
                    "§§§§§$$$$KK¦@@@@@\t\tççç§§§§§$$$KKKKKK@\t\t\t\t\t\tçççç§§§§§§LLLLLLLL111111\n\n}ççç§§§§§§LLLLLLLL111111\n\n\n}}}çç"+
                    "¨¨¨¨¨¨LLLLLLLLM1111\n\n\n\n\nq}}}}}}Ó¨¨¨¨¨¨LLLLLLLMMM111\n\n\n\n\013qp}}}}}Ó¨¨¨¨¨¨)))LLLMMMMMRR\n\n\013\013\013ppppp}ÓÓ¨¨¨¨¨))))SSSMMMMRRRRR\013\013\013pppppooÕ"+
                    "¨¨¨®®))))SSSSMMRRRRRR`\013kkooooooo®®®®®®®))SSSSMRRRRR````kkooooooo®®®®®®®®­­­SSRRRRR`````cccllllln®®®®®®®­­­­­­­RR``````cccclllllÄ"+
                    "®®®®®®­­­­­­­­­```````cccclllllÄ®®®®®­­­­­­­­­­¸```...ccbbblllÄÄ®®®®®­­­­­­­­­¸¸........bbblllÄÄ®®®®­­­­­­­­­¸¸¸.........bbb\023\023\023\023"+
                    "ýýýýýý÷÷÷÷÷÷÷ööïïïïïïïïïïååýýýýýýý÷÷ööööööïïïïïïïïïïîîýýýýýýýööööööööïïïïïïïïïîîîýýýýýýýööööööööïïïïïïïïîîîî"+
                    "ýýýýýþþöööööööööïïïïïïïîîîîý þþþþþþöööööööö\032\032\032\032\032ïîîîîî¢¢¢    þþþþþþöööööö\032\032\032\032\032\032\032îîîîî¢¢¢¢     þþþþþþööö\032\032\032\032\032\032\032\032\032ääää"+
                    "¢¢¢¢¢      þþþþ\032\032\032\032\032\032\032ääää¢¢¢¢¢       ??\032\032\032\032\032ääää¡¡¢¢¢     ??555ææææ¡¡¡¡¡¡  5555555æææææ"+
                    "¡¡¡¡¡¡$5555555@@@æææææ¡¡¡¡¡$$$55555@@@@@æææææ¡¡¡¡$$$$$$55@@@@@@æææææ§§§§$$$$$$$@@@@@@@çççç"+
                    "§§§§$$$$$$$@@@@@@AAçççç§§§§§$$$$$LLL@@@1111\nçççç§§§§§$$$LLLLLEE11111\n\nçççç§§§§§¨LLLLLLLLE11111\n\n\n}}}çç"+
                    "¨¨¨¨¨¨LLLLLLLMM1111\n\n\n\n//}}}}}}}¨¨¨¨¨¨))LLLLMMMM111\n\n\n\013//}}}}}}Õ¨¨¨¨¨¨))))LMMMMMMRR\n\013\013\013\013\013pppp}ÕÕ¨¨¨¨¨))))))MMMMMRRRR\013\013\013\013\013ppppoÕÕ"+
                    "¨¨¨¨¨))))))MMMMRRRRRR\013\013\013\013ooooooÕ¨®®®®®))))))MMRRRRRR```ccooooonn®®®®®®®))))­MRRRRR`````ccclllnnn®®®®®®®­­­­­­RRRR`````ccccllllln"+
                    "®®®®®®­­­­­­­­R``````cccccllllll®®®®®­­­­­­­­­­```.....bbbbllll\023®®®®­­­­­­­­­­­¸........bbbbl\023\023\023®®®¬¬¬¬¬­­­­­­¸¸.........bbb\023\023\023\023"+
                    "ýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïïïïîýýýýýýýý÷÷÷÷÷÷÷öïïïïïïïïïïîîýýýýýýýý÷÷ööööööïïïïïïïïïîîîýýýýýýýýööööööööïïïïïïïïîîîî"+
                    "ýýýýýýýööööööööïïïïïïïïîîîîý    þþþööööööö\032\032\032\032\032\032ïîîîîî¢¢       þþþööööö\032\032\032\032\032\032\032\032îîîîî¢¢¢¢         þþö\032\032\032\032\032\032\032\032\032\032îîîî"+
                    "¢¢¢¢          \032\032\032\032\032\032\032\032ääää¡¡¢¢         \032\032\032\032\032\032ääää¡¡¡¡¡      555\032\032\032æææææ¡¡¡¡¡¡   5555ææææææ"+
                    "¡¡¡¡¡¡$$55555@@@ææææææ¡¡¡¡¡$$$$$55@@@@@ææææææ¡¡¡¡$$$$$$$5@@@@@@æææææ§§§$$$$$$$$6666666çççç"+
                    "§§§§$$$$$$$$66666AAçççç§§§§§$$$$$$$66EAAAAAçççç§§§§§$$$$LLLEEEEAAAA\nçççç§§§§§¨$LLLLLEEEE1111\n\n}}ççç"+
                    "¨¨¨¨¨¨)LLLLLEEEE111\n\n\n////}}}}}ç¨¨¨¨¨¨)))LLLMMMMM11\n\013\013\013///}}}}ÕÕ¨¨¨¨¨))))))MMMMMMMR\013\013\013\013\013//pp}ÕÕÕ¨¨¨¨¨))))))MMMMMRRRR\013\013\013\013\013pppoÕÕÕ"+
                    "¨¨¨¨))))))))MMMRRRRRR\013\013\013\f\foooonÕ¨¨¨®))))))))MMRRRRRR``\f\f\f\foonnnn®®®®®®))))))MRRRRRR```ccccllnnnn®®®®®®®­­­­­­RRRR```QQccccllllnn"+
                    "®®®®®®­­­­­­­­RR``QQQQccbbbllllm®®®®®¬¬¬­­­­­­­`QQQ...bbbbbllmm\023®®®¬¬¬¬¬¬¬¬¬¬­­........bbbbbmm\023\023®®¬¬¬¬¬¬¬¬¬¬¬¬¬.........bbbb\023\023\023\023"+
                    "ýýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïïïïîýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïïïîîýýýýýýýý÷÷÷÷÷÷÷ïïïïïïïïïïîîîýýýýýýýý÷÷÷öööööïïïïïïïïîîîî"+
                    "ýýýýýýýýööööööööïïïïïïïíîîîî        öööööö\032\032\032\032\032\032\032íîîîîî          öööö\032\032\032\032\032\032\032\032\032îîîîî¢¢¢            \032\032\032\032\032\032\032\032\032\032îîîî"+
                    "¡¢¢¢          \032\032\032\032\032\032\032\032\032îîî¡¡¡¡        \032\032\032\032\032\032\032ææææ¡¡¡¡¡    \032\032\032\032æææææ¡¡¡¡¡ 5\032ææææææ"+
                    "¡¡¡¡¡$$$55666ææææææ¡¡¡¡ $$$$$$666666ææææææ    $$$$$$$666666æææææ    $$$$$$$666666çççç"+
                    "§§§§$$$$$$$$6666AAAçççç§§§§$$$$$$$$7777AAAAçççç§§§§$$$$$$EEEEEAAAAçççç§§§$$LLLEEEEEEAAA}}ççç"+
                    "¨¨¨¨¨¨)))LLEEEEE0000\n/////}}}}Õç¨¨¨¨¨))))))MMMMM0000\013\013/////}}ÕÕÕ¨¨¨¨¨))))))MMMMMM00\013\013\013\013////pÕÕÕÕ¨¨¨¨))))))))MMMMNNNN\013\013\013\013/\fppÕÕÕÕ"+
                    "¨¨¨¨))))))))MMMNNNNNN\013\013\f\f\f\fonnnÕ¨¨¨¨))))))))MMNNNNNNNQ\f\f\f\f\fnnnnn®®®®))))))))©NNNNNNQQQQ\f\f\f\fnnnnn®®®®®®)))))©©NNNNNQQQQQQccllnnnn"+
                    "®®®®®¬¬¬¬¬¬¬¬¬NNQQQQQQQbbbblmmmm®®®¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQQQbbbbmmmmm®®¬¬¬¬¬¬¬¬¬¬¬¬¬........bbbbmmm\023\023¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬.........bbbmm\023\023\023"+
                    "ýýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïïï\033\033ýýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïïííîýýýýýýýý÷÷÷÷÷÷÷÷ïïïïïïïïííîîýýýýýýýý÷÷÷÷÷÷÷ïïïïïïïïíííîî"+
                    "ýýýýýýýüüüüüüüïïïïïïïíííîîî      üüüüüüü\032\032\032\032\032\032íííîîîî        üüüüü\032\032\032\032\032\032\032\032\032íîîîî           ü\032\032\032\032\032\032\032\032\032îîîî"+
                    "¡¡¡         \032\032\032\032\032\032\032\032\032îîî¡¡¡¡     \032\032\032\032\032\032\032ææææ¡¡¡¡  \032\032\032\032\032æææææ¡¡¡¡¡\032\032\032æææææ"+
                    "¡¡    666ææææææ     $$$$$$666666ææææææ     $$$$$$666666æææææ    $$$$$$$666666çççç"+
                    "§§$$$$$$$$7777AAçççç§$$$$$$77777AAAAççççç$$$$$EEEEEAAAAççççç$$$EEEEEEEAAA}çççç"+
                    "))))EEEEEE00000//////}èèèè¨¨¨¨¨))))))EEEE00000\013//////}ÕÕÕÕ¨¨¨¨¨))))))MMMMM0000\013\013/////ÕÕÕÕÕ¨¨¨¨))))))))MMMMNNNNN\013\013\f\f\f\f\fÕÕÕÕ"+
                    "¨¨¨¨))))))))MMNNNNNNN\f\f\f\f\f\f\fnnné¨¨¨)))))))))©NNNNNNNNO\f\f\f\f\fnnnnn¨¨®)))))))©©©©NNNNNQQQQ\f\f\f\fnnn~~®®®®)))))©©©©©NNNNQQQQQQQ\r\r\rn~~~"+
                    "®®®¬¬¬¬¬¬¬¬¬©©©NQQQQQQQQbbbmmmmm®¬¬¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQQQbbbbmmmmm(¬¬¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQQ.bbbbmmmm\023(¬¬¬¬¬¬¬¬¬¬¬¬¬¬¬........bbbmm\023\023\023"+
                    "ýýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïï\033\033\033ýýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïïííííýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïïííííîýýýýýýýüüüüüüüüïïïïïïíííííî"+
                    "ýýýýýüüüüüüüüüïïïïííííííîî     üüüüüüüüü\032\032\032\032ííííííîî       üüüüüüü\032\032\032\032\032\032\032íííîîî         üüüü\032\032\032\032\032\032\032\032\032íîîî"+
                    "¡¡¡       \032\032\032\032\032\032\032\032\032îîî¡¡¡¡   \032\032\032\032\032\032\032ææææ¡¡¡¡\032\032\032\032\032\032ææææ¡¡   \032\032\032\032æææææ"+
                    "      66æææææææ      $$$$66666ææææææ     $$$$$$666666ëëëëë     $$$$$$666666ëëëëë"+
                    "  $$$$$$$777777Açççç$$$$$$77777AAAAçççç$$$$777777AAAAçççç$EEEEEEE00AAèèèè"+
                    ")))EEEEE00000Bèèèè)))))EEE000000BB//èèèè¨¨¨¨))))))))MM000000BB///ÕÕÕÕ¨¨¨¨))))))))MMMNNNNNND\f\f\f\f\féééé"+
                    "¨¨¨)))))))))©MNNNNNNND\f\f\f\f\f\féééé¨¨¨)))))))©©©©NNNNNNOO\f\f\f\f\f\fn~~~ªªª))))))©©©©©NNNNNOOOO\f\f\f\r\r~~~~ªªªª)))©©©©©©©©NNNQQQQQQ\r\r\r\r~~~~"+
                    "ªª¬¬¬¬¬¬¬¬¬©©©©NQQQQQQQQQ\r\r\rmmm~((¬¬¬¬¬¬¬¬¬¬¬©©QQQQQQQQQbbmmmmmm((¬¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQQQQbbmmmmmm((¬¬¬¬¬¬¬¬¬¬¬¬¬¬QQ......bbmmmm\023\023"+
                    "ýýýýýý÷÷÷÷÷÷÷÷÷÷÷ïïïïïï\033\033\033\033\033ýýýýýý÷÷÷÷÷÷÷÷÷ïïïïïïíííí\033\033ýýýýýýüüüüüüüüüïïïïïíííííííýýýýýüüüüüüüüüïïïïíííííííí"+
                    "ýýýüüüüüüüüüüüïïííííííííî    üüüüüüüüü\032\032\032ííííííííî      üüüüüüüü\032\032\032\032\032íííííîî      üüüüûû\032\032\032\032\032\032\032ííííîî"+
                    "    \032\032\032\032\032\032\032\032íîîî¡¡¡\032\032\032\032\032\032\032ææææ    \032\032\032\032\032\032ææææ     \032\032\032\032æææææ"+
                    "      66ùùëëëëææ       6666ùùëëëëëë      $$$$$666666ëëëëëë     $$$$$$777777ëëëëë"+
                    "   $$$$$$777777Aëëëë$$$$7777777AAAçççç$$$7777788AAAèèèè$EEEE88888AAèèèè"+
                    "))EEEE88000BBBèèèè)))))EEE00000BBBBèèè)))))))M000000BBBBééé¨¨¨)))))))©©MNNNNNDDDDééé"+
                    "¨¨))))))©©©©NNNNNDDDD\f\f\féééªªªª))))©©©©©©©NNNNOOOO\f\f\f\réééªªªªª))©©©©©©©©NNNOOOOOO\r\r\r\r\r~~~ªªªªª¬©©©©©©©©©©NOOOOOOO\r\r\r\r\r~~~"+
                    "ªªªª¬¬¬¬¬©©©©©©©OOQQQQQQ\r\r\r\r\r~\177\177(((¬¬¬¬¬¬¬¬¬©©©©QQQQQQQPPP\rmmmaa(((¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQQQPPPmmmaaa(((¬¬¬¬¬¬¬¬¬¬¬¬¬QQQQQQPPPPmmaaaa"+
                    "\037\037\037ýýýýý÷÷÷÷÷÷÷÷÷÷÷ïïïïï\033\033\033\033\033\033ýýýýý÷÷÷÷÷÷÷÷÷ïïïïïííí\033\033\033\033ýýýýüüüüüüüüüüüïïïííííííí\033ýýýüüüüüüüüüüüïïííííííííí"+
                    "ýüüüüüüüüüüüüïíííííííííí  üüüüüüüüüüü\032íííííííííí    üüüüüüüûûû\032\032\032íííííííí   üüüüûûûûû\032\032\032\032ííííííî"+
                    "ûûûûûûû\032\032\032\032\032\032ííììì\032\032\032\032\032\032\032ìììì   øøøøøøøìììì    øøøøøëëëëë"+
                    "     ùùùùùëëëëë      666ùùùùëëëëë       $$$$666677ùùëëëëëë      $$$$$777777ëëëëëë"+
                    "    $$$$77777777ëëëëë$$$77777788AAèèèè$777888888Aèèèè888888888BBèèè"+
                    "88888899BBBèèè88889999BBBBBèè)©8999999BBBBééé)©©©©999NDDDDDééé"+
                    "ªªª©©©©©©©NNNDDDDDDééªªªª©©©©©©©©NNNDDDDDD\f\rééªªªªª©©©©©©©©©©NOOOOOOO\r\r\r\r\r~~~ªªªªªª©©©©©©©©©©OOOOOOOO\r\r\r\r\r\177\177\177"+
                    "ªªªªª¬¬©©©©©©©©©OOOOOOOPPP\r\r\016\177\177\177((((¬¬¬¬¬¬¬©©©©©OOOOOOPPPPP\016\016aaa((((¬¬¬¬¬¬¬¬¬©©©QQQQQPPPPPP\016aaaa((((¬¬¬¬¬¬¬¬¬¬¬¬QQQQPPPPPPPaaaaa"+
                    "\037\037\037\037\037\037ýýýý÷÷÷÷÷÷÷÷÷÷÷ïïï\033\033\033\033\033\033\033\033\037\037\037ýýýüüüüüüüüüüüïïïíí\033\033\033\033\033\033ýýüüüüüüüüüüüüïííííííí\033\033\033ýüüüüüüüüüüüüüíííííííííí"+
                    "üüüüüüüüüüüüüííííííííííüüüüüüüüüüûûûíííííííííí üüüüüüüûûûûûûíííííííííüüûûûûûûûûøøøííííííì"+
                    "ûûûûûûûûøøøøøøøììììûûûûûûøøøøøøøøìììì  ûûûûøøøøøøøøìììì   øøøøøøøùìììì"+
                    "    ùùùùùùùùëëëë     \036\036ùùùùùùùëëëëë      \036\036\036\036\036ùùùùùùëëëëë       $$$777\036\036\036\036\036ùùùùùëëëëë"+
                    "%%% $$$$777777\036\036\036ëëëëëë7778888888ú\034\034\034\034\034888888888Bèèè888888899BBèè"+
                    "88888999BBBBèè8899999BBBBBè©&999999:BBBéª©©©&&&9:::DDDéé"+
                    "ªªª©©©©©©&&:DDDDDDééªªªª©©©©©©©©&DDDDDDDCêªªªªªª©©©©©©©©©©OOOOOOO<\r\r\r\r\177\177ªªªªªª«©©©©©©©©©OOOOOOOP<<\r\r\r\177\177\177"+
                    "ªªªªª«««««©©©©©©OOOOOOPPPPP\016\016\016\177\177(((((«««««««©©©©OOOOOPPPPPP\016\016\016\016a(((((¬¬««««««««©OOOOPPPPPPP\016\016aaa(((((¬¬¬¬¬¬«««««'''''''PPPP\016aaaa"+
                    "\037\037\037\037\037\037\037\037ýüüüüüüüüüüüüï\033\033\033\033\033\033\033\033\033\033\037\037\037\037\037\037ýüüüüüüüüüüüüüíí\033\033\033\033\033\033\033\033\037\037üüüüüüüüüüüüüüííííí\033\033\033\033\033üüüüüüüüüüüüüüíííííííí\033\033"+
                    "üüüüüüüüüüüüûûííííííííííüüüüüüüüüüûûûûûíííííííííüüüüüüûûûûûûûûøííííííííûûûûûûûûûûøøøøøííììì"+
                    "ûûûûûûûûûøøøøøøøììììûûûûûûøøøøøøøøììììûûûøøøøøøøøøìììì  ûûøøøøøøøøùìììì"+
                    "   \036ùùùùùùùùùëëëë    \036\036\036\036ùùùùùùùùëëëë%    \036\036\036\036\036\036ùùùùùùùùëëëë%%%%% \036\036\036\036\036\036\036\036\036ùùùùùùëëëëë"+
                    "%%%%%%\036\036\036\036\036\036\036\036\036\036\036úúúùù\034\034\034\034\034\034%%%%888\036\036\036\036\036\036úúúúúúú\034\034\034\034\034888888889úúúúúú\034\034\03488888999úúúúúúè"+
                    "88899999BBúúúè89999999BBBúú&&&999:::BBBêªª©&&&&&::::;;;\035êêê"+
                    "ªªª©©©©©&&&&::;;;;\035\035êêêªªªªª©©©©©©©&&&D;;;;;CCCCCêêêªªªªªª©©©©©©©©©&&;;;;;;<CCCC\177ªªªªªª«««©©©©©©©©OOOOOO<<<<<\016\177\177"+
                    "ªªªªª«««««««©©©©OOOOOPPPPP<<\016\016\016\177(((((«««««««««©©OOOOPPPPPPP\016\016\016\016\016(((((«««««««««««O'''''PPPPP\016\016\016aa((((((««««««««««''''''''''P\016\016aa\017"+
                    "\037\037\037\037\037\037\037\037\037üüüüüüüüüüüüü\033\033\033\033\033\033\033\033\033\033\037\037\037\037\037\037\037\037üüüüüüüüüüüüüü\033\033\033\033\033\033\033\033\033\033\037\037\037\037\037\037üüüüüüüüüüüüüüííí\033\033\033\033\033\033\033\037\037üüüüüüüüüüüüüüíííííí\033\033\033\033"+
                    "üüüüüüüüüüüûûûûíííííííííüüüüüüüüûûûûûûûíííííííííüüüüûûûûûûûûûûøøíííííììûûûûûûûûûûûøøøøøøìììì"+
                    "ûûûûûûûûûøøøøøøøììììûûûûûûøøøøøøøøììììûûûøøøøøøøøøììììûøøøøøøøøùìììì"+
                    "  \036ùùùùùùùùùìììì%%%\036\036\036ùùùùùùùùùëëëë%%%%%\036\036\036\036\036\036ùùùùùùùùëëëë%%%%%%\036\036\036\036\036\036\036\036\036ùùùùùù\034\034\034\034\034"+
                    "%%%%%%\036\036\036\036\036\036\036\036\036\036\036úúùùùù\034\034\034\034\034%%%%%\036\036\036\036\036\036\036\036\036úúúúúúú\034\034\034\034\034%%%%8888\036\036\036úúúúúúúú\034\034\034\03488889999úúúúúú\034"+
                    "88999999úúúúúú&&99999::úúúúª&&&&&::::::\035\035\035\035êêªª©&&&&&&:::;;\035\035\035\035\035êêêê"+
                    "ªªªª©©©&&&&&::;;;;\035\035\035Cêêêêªªªªª©©©©©&&&&;;;;;;CCCCCêêêªªªªªªª««©©©©©©&&&;;;;;;<CCCCªªªªªª«««««©©©©©&&;;;;<<<<<<"+
                    "ªªªªª«««««««««©©©OOOPPPPP<<<\016\016\016(((((««««««««««««O'''PPPPPP\016\016\016\016\016(((((«««««««««««'''''''''PP\016\016\016\017\017((((((««««««««««'''''''''''\016\017\017\017\017"+
                    "\037\037\037\037\037\037\037\037\037üüüüüüüüüüüü\033\033\033\033\033\033\033\033\033\033\033\037\037\037\037\037\037\037\037\037üüüüüüüüüüüüü\033\033\033\033\033\033\033\033\033\033\037\037\037\037\037\037\037\037üüüüüüüüüüüüüüíí\033\033\033\033\033\033\033\033\037\037\037\037\037üüüüüüüüüüüüûûûíííí\033\033\033\033\033"+
                    "üüüüüüüüüûûûûûûííííííí\033\033üüüüüüûûûûûûûûûííííííííüüüûûûûûûûûûûûøøøøííìììûûûûûûûûûûûøøøøøøìììì"+
                    "ûûûûûûûûûøøøøøøøììììûûûûûûøøøøøøøøììììûûûøøøøøøøøøììììøøøøøøøøøùìììì"+
                    "%%\036ùùùùùùùùùìììì%%%%\036\036\036ùùùùùùùùùù\034\034\034%%%%%\036\036\036\036\036\036ùùùùùùùù\034\034\034\034%%%%%%\036\036\036\036\036\036\036\036\036ùùùùùù\034\034\034\034\034"+
                    "%%%%%%\036\036\036\036\036\036\036\036\036\036\036úùùùùù\034\034\034\034\034%%%%%\036\036\036\036\036\036\036\036\036úúúúúúú\034\034\034\034\034%%%%\036\036\036\036\036\036\036úúúúúúúúú\034\034\034\034%%%889999úúúúúúúú\034\034"+
                    "9999999úúúúúú&&&&&9:::úúúú\035êª&&&&&&::::\035\035\035\035\035\035êêêªªª&&&&&&&:::;;\035\035\035\035\035êêêê"+
                    "ªªªª©&&&&&&&:;;;\035\035\035\035Cêêêêªªªªªª©©©©&&&&&&;;;;;\035CCCCêêêªªªªªªª««««©©©&&&&;;;;;;CCCCªªªªªª««««««««©&&&;;;;<<<<<<"+
                    "ªªªªª«««««««««««&;;'PPPP<<<<(((((««««««««««««'''''''PP<<\016\016\017\017(((((«««««««««««'''''''''''\016\017\017\017\017((((((««««««««««''''''''''''\017\017\017\017"
            ;

    /**
     * Constructs a default PaletteReducer that uses the DawnBringer Aurora palette.
     */
    public PaletteReducer() {
        this(Coloring.DB16);
//        exact(Coloring.AURORA, ENCODED_AURORA);
    }

    /**
     * Constructs a PaletteReducer that uses the given array of RGBA8888 ints as a palette (see {@link #exact(int[])}
     * for more info).
     *
     * @param rgbaPalette an array of RGBA8888 ints to use as a palette
     */
    public PaletteReducer(int[] rgbaPalette) {
        paletteMapping = new byte[0x8000];
        exact(rgbaPalette);
    }

    /**
     * Constructs a PaletteReducer that uses the given array of RGBA8888 ints as a palette (see {@link #exact(int[])}
     * for more info).
     *
     * @param rgbaPalette an array of RGBA8888 ints to use as a palette
     * @param metric      almost always either {@link #basicMetric}, which is faster, or {@link #labMetric}, which may be better
     */
    public PaletteReducer(int[] rgbaPalette, ColorMetric metric) {
        paletteMapping = new byte[0x8000];
        exact(rgbaPalette, metric);
    }

    /**
     * Constructs a PaletteReducer that uses the given array of Color objects as a palette (see {@link #exact(Color[])}
     * for more info).
     *
     * @param colorPalette an array of Color objects to use as a palette
     */
    public PaletteReducer(Color[] colorPalette) {
        paletteMapping = new byte[0x8000];
        exact(colorPalette);
    }

    /**
     * Constructs a PaletteReducer that uses the given Array of Color objects as a palette (see {@link #exact(Color[])}
     * for more info).
     *
     * @param colorPalette an array of Color objects to use as a palette
     */
    public PaletteReducer(Array<Color> colorPalette) {
        paletteMapping = new byte[0x8000];
        if (colorPalette != null)
            exact(colorPalette.items, colorPalette.size);
        else
            exact(Coloring.AURORA, ENCODED_AURORA);
    }

    /**
     * Constructs a PaletteReducer that analyzes the given Pixmap for color count and frequency to generate a palette
     * (see {@link #analyze(Pixmap)} for more info).
     *
     * @param pixmap a Pixmap to analyze in detail to produce a palette
     */
    public PaletteReducer(Pixmap pixmap) {
        paletteMapping = new byte[0x8000];
        analyze(pixmap);
    }
    /**
     * Constructs a PaletteReducer that uses the given array of RGBA8888 ints as a palette (see {@link #exact(int[])}
     * for more info) and an encoded String to use to look up pre-loaded color data.
     *
     * @param palette an array of RGBA8888 ints to use as a palette
     * @param preload an ISO-8859-1-encoded String containing preload data
     */
    public PaletteReducer(int[] palette, String preload)
    {
        exact(palette, preload);
    }
    /**
     * Constructs a PaletteReducer that analyzes the given Pixmap for color count and frequency to generate a palette
     * (see {@link #analyze(Pixmap, int)} for more info).
     *
     * @param pixmap    a Pixmap to analyze in detail to produce a palette
     * @param threshold the minimum difference between colors required to put them in the palette (default 400)
     */
    public PaletteReducer(Pixmap pixmap, int threshold) {
        paletteMapping = new byte[0x8000];
        analyze(pixmap, threshold);
    }

    /**
     * Color difference metric; returns large numbers even for smallish differences.
     * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
     *
     * @param color1 an RGBA8888 color as an int
     * @param color2 an RGBA8888 color as an int
     * @return the difference between the given colors, as a positive double
     */
    public static double difference(final int color1, final int color2) {
        // if one color is transparent and the other isn't, then this is max-different
        if(((color1 ^ color2) & 0x80) == 0x80) return Double.POSITIVE_INFINITY;
        final int r1 = (color1 >>> 24), g1 = (color1 >>> 16 & 0xFF), b1 = (color1 >>> 8 & 0xFF),
                r2 = (color2 >>> 24), g2 = (color2 >>> 16 & 0xFF), b2 = (color2 >>> 8 & 0xFF),
                rmean = r1 + r2,
                r = r1 - r2,
                g = g1 - g2,
                b = b1 - b2,
                y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
//        return (((512 + rmean) * r * r) >> 8) + g * g + (((767 - rmean) * b * b) >> 8);
        return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
    }

    /**
     * Color difference metric; returns large numbers even for smallish differences.
     * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
     *
     * @param color1 an RGBA8888 color as an int
     * @param r2     red value from 0 to 255, inclusive
     * @param g2     green value from 0 to 255, inclusive
     * @param b2     blue value from 0 to 255, inclusive
     * @return the difference between the given colors, as a positive double
     */
    public static double difference(final int color1, int r2, int g2, int b2) {
        if((color1 & 0x80) == 0) return Double.POSITIVE_INFINITY; // if a transparent color is being compared, it is always different
        final int
                r1 = (color1 >>> 24),
                g1 = (color1 >>> 16 & 0xFF),
                b1 = (color1 >>> 8 & 0xFF),
                rmean = (r1 + r2),
                r = r1 - r2,
                g = g1 - g2,
                b = b1 - b2,
                y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
        return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
    }

    /**
     * Color difference metric; returns large numbers even for smallish differences.
     * If this returns 250 or more, the colors may be perceptibly different; 500 or more almost guarantees it.
     *
     * @param r1 red value from 0 to 255, inclusive
     * @param g1 green value from 0 to 255, inclusive
     * @param b1 blue value from 0 to 255, inclusive
     * @param r2 red value from 0 to 255, inclusive
     * @param g2 green value from 0 to 255, inclusive
     * @param b2 blue value from 0 to 255, inclusive
     * @return the difference between the given colors, as a positive double
     */
    public static double difference(final int r1, final int g1, final int b1, final int r2, final int g2, final int b2) {
        final int rmean = (r1 + r2),
                r = r1 - r2,
                g = g1 - g2 << 1,
                b = b1 - b2,
                y = Math.max(r1, Math.max(g1, b1)) - Math.max(r2, Math.max(g2, b2));
//        return (((512 + rmean) * r * r) >> 8) + g * g + (((767 - rmean) * b * b) >> 8);
//        return (((1024 + rmean) * r * r) >> 9) + g * g + (((1534 - rmean) * b * b) >> 9) + y * y * 5;
        return (((1024 + rmean) * r * r) >> 7) + g * g * 12 + (((1534 - rmean) * b * b) >> 8) + y * y * 14;
    }

    /**
     * Gets a pseudo-random float between -0.65625f and 0.65625f, determined by the upper 23 bits of seed.
     * This currently uses a uniform distribution for its output, but earlier versions intentionally used a non-uniform
     * one; a non-uniform distribution can sometimes work well but is very dependent on how error propagates through a
     * dithered image, and in bad cases can produce bands of bright mistakenly-error-adjusted colors.
     * @param seed any int, but only the most-significant 23 bits will be used
     * @return a float between -0.65625f and 0.65625f, with fairly uniform distribution as long as seed is uniform
     */
    static float randomXi(int seed)
    {
        return ((seed >> 9) * 0x1.5p-23f);
//        return NumberUtils.intBitsToFloat((seed & 0x7FFFFF & ((seed >>> 11 & 0x400000)|0x3FFFFF)) | 0x3f800000) - 1.4f;
//        return NumberUtils.intBitsToFloat((seed & 0x7FFFFF & ((seed >>> 11 & 0x600000)|0x1FFFFF)) | 0x3f800000) - 1.3f;
    }

    /**
     * Builds the palette information this PNG8 stores from the RGBA8888 ints in {@code rgbaPalette}, up to 256 colors.
     * Alpha is not preserved except for the first item in rgbaPalette, and only if it is {@code 0} (fully transparent
     * black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, or only has one color, then
     * this defaults to DawnBringer's Aurora palette with 256 hand-chosen colors (including transparent).
     *
     * @param rgbaPalette an array of RGBA8888 ints; all will be used up to 256 items or the length of the array
     */
    public void exact(int[] rgbaPalette) {
        exact(rgbaPalette, basicMetric);
    }
    /**
     * Builds the palette information this PNG8 stores from the RGBA8888 ints in {@code rgbaPalette}, up to 256 colors.
     * Alpha is not preserved except for the first item in rgbaPalette, and only if it is {@code 0} (fully transparent
     * black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, or only has one color, then
     * this defaults to DawnBringer's Aurora palette with 256 hand-chosen colors (including transparent).
     *
     * @param rgbaPalette an array of RGBA8888 ints; all will be used up to 256 items or the length of the array
     * @param metric      almost always either {@link #basicMetric}, which is faster, or {@link #labMetric}, which may be better
     */
    public void exact(int[] rgbaPalette, ColorMetric metric) {
        if (rgbaPalette == null || rgbaPalette.length < 2) {
            exact(Coloring.AURORA, ENCODED_AURORA);
            return;
        }
        Arrays.fill(paletteArray, 0);
        Arrays.fill(paletteMapping, (byte) 0);
        final int plen = Math.min(256, rgbaPalette.length);
        int color, c2;
        double dist;
        for (int i = 0; i < plen; i++) {
            color = rgbaPalette[i];
            if ((color & 0x80) != 0) {
                paletteArray[i] = color;
                paletteMapping[(color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F)] = (byte) i;
            }
        }
        int rr, gg, bb;
        for (int r = 0; r < 32; r++) {
            rr = (r << 3 | r >>> 2);
            for (int g = 0; g < 32; g++) {
                gg = (g << 3 | g >>> 2);
                for (int b = 0; b < 32; b++) {
                    c2 = r << 10 | g << 5 | b;
                    if (paletteMapping[c2] == 0) {
                        bb = (b << 3 | b >>> 2);
                        dist = 0x7FFFFFFF;
                        for (int i = 1; i < plen; i++) {
                            if (dist > (dist = Math.min(dist, metric.difference(paletteArray[i], rr, gg, bb))))
                                paletteMapping[c2] = (byte) i;
                        }
                    }
                }
            }
        }
//        generatePreloadCode(paletteMapping);
    }

    /**
     * Given a byte array, this writes a file containing a code snippet that can be pasted into Java code as the preload
     * data used by {@link #exact(int[], String)}; this is almost never needed by external code. When using this for
     * preload data, the byte array should be {@link #paletteMapping}.
     * @param data the bytes to use as preload data, usually the {@link #paletteMapping} of a PaletteReducer
     */
    public static void generatePreloadCode(final byte[] data){
        StringBuilder sb = new StringBuilder(data.length);
        for (int i = 0; i < data.length;) {
            sb.append('"');
            for (int j = 0; j < 0x80 && i < data.length; j++) {
                byte b = data[i++];
                switch (b)
                {
                    case '\t': sb.append("\\t");
                        break;
                    case '\b': sb.append("\\b");
                        break;
                    case '\n': sb.append("\\n");
                        break;
                    case '\r': sb.append("\\r");
                        break;
                    case '\f': sb.append("\\f");
                        break;
                    case '\"': sb.append("\\\"");
                        break;
                    case '\\': sb.append("\\\\");
                        break;
                    default:
                        if(Character.isISOControl(b))
                            sb.append(String.format("\\%03o", b));
                        else
                            sb.append((char)(b&0xFF));
                        break;
                }
            }
            sb.append('"');
            if(i != data.length)
                sb.append('+');
            sb.append('\n');
        }
        String filename = String.format("bytes_%08X.txt", Arrays.hashCode(data));
        Gdx.files.local(filename).writeString(sb.toString(), false, "ISO-8859-1");
        System.out.println("Wrote code snippet to " + filename);
    }
    /**
     * Builds the palette information this PaletteReducer stores from the given array of RGBA8888 ints as a palette (see
     * {@link #exact(int[])} for more info) and an encoded String to use to look up pre-loaded color data. The encoded
     * string is going to be hard to produce if you intend to do this from outside WarpWriter, but there is a
     * generatePreloadCode() method in this class if you're hacking on WarpWriter. For external code, there's slightly
     * more startup time spent when initially calling {@link #exact(int[])}, but it will produce the same result. 
     *
     * @param palette an array of RGBA8888 ints to use as a palette
     * @param preload an ISO-8859-1-encoded String containing preload data
     */
    public void exact(int[] palette, String preload)
    {
        for (int i = 0; i < 256 & i < palette.length; i++) {
            int color = palette[i];
            if((color & 0x80) != 0)
                paletteArray[i] = color;
        }
        try {
            paletteMapping = preload.getBytes("ISO-8859-1"); // don't use StandardCharsets; not supported on GWT
        } catch (UnsupportedEncodingException e) {
            e.printStackTrace();
            paletteMapping = new byte[0x8000];
        }
    }

    /**
     * Builds the palette information this PaletteReducer stores from the Color objects in {@code colorPalette}, up to
     * 256 colors.
     * Alpha is not preserved except for the first item in colorPalette, and only if its r, g, b, and a values are all
     * 0f (fully transparent black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, or only
     * has one color, then this defaults to DawnBringer's Aurora palette with 256 hand-chosen colors (including
     * transparent).
     *
     * @param colorPalette an array of Color objects; all will be used up to 256 items or the length of the array
     */
    public void exact(Color[] colorPalette) {
        exact(colorPalette, 256, basicMetric);
    }

    /**
     * Builds the palette information this PaletteReducer stores from the Color objects in {@code colorPalette}, up to
     * 256 colors.
     * Alpha is not preserved except for the first item in colorPalette, and only if its r, g, b, and a values are all
     * 0f (fully transparent black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, or only
     * has one color, then this defaults to DawnBringer's Aurora palette with 256 hand-chosen colors (including
     * transparent).
     *
     * @param colorPalette an array of Color objects; all will be used up to 256 items or the length of the array
     * @param metric       almost always either {@link #basicMetric}, which is faster, or {@link #labMetric}, which may be better
     */
    public void exact(Color[] colorPalette, ColorMetric metric) {
        exact(colorPalette, 256, metric);
    }

    /**
     * Builds the palette information this PaletteReducer stores from the Color objects in {@code colorPalette}, up to
     * 256 colors.
     * Alpha is not preserved except for the first item in colorPalette, and only if its r, g, b, and a values are all
     * 0f (fully transparent black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, only has
     * one color, or limit is less than 2, then this defaults to DawnBringer's Aurora palette with 256 hand-chosen
     * colors (including transparent).
     *
     * @param colorPalette an array of Color objects; all will be used up to 256 items, limit, or the length of the array
     * @param limit        a limit on how many Color items to use from colorPalette; useful if colorPalette is from an Array
     */
    public void exact(Color[] colorPalette, int limit) {
        exact(colorPalette, limit, basicMetric);
    }

    /**
     * Builds the palette information this PaletteReducer stores from the Color objects in {@code colorPalette}, up to
     * 256 colors.
     * Alpha is not preserved except for the first item in colorPalette, and only if its r, g, b, and a values are all
     * 0f (fully transparent black); otherwise all items are treated as opaque. If rgbaPalette is null, empty, only has
     * one color, or limit is less than 2, then this defaults to DawnBringer's Aurora palette with 256 hand-chosen
     * colors (including transparent).
     *
     * @param colorPalette an array of Color objects; all will be used up to 256 items, limit, or the length of the array
     * @param limit        a limit on how many Color items to use from colorPalette; useful if colorPalette is from an Array
     * @param metric       almost always either {@link #basicMetric}, which is faster, or {@link #labMetric}, which may be better
     */
    public void exact(Color[] colorPalette, int limit, ColorMetric metric) {
        if (colorPalette == null || colorPalette.length < 2 || limit < 2) {
            exact(Coloring.AURORA, ENCODED_AURORA);
            return;
        }
        Arrays.fill(paletteArray, 0);
        Arrays.fill(paletteMapping, (byte) 0);
        final int plen = Math.min(Math.min(256, colorPalette.length), limit);
        int color, c2;
        double dist;
        for (int i = 0; i < plen; i++) {
            color = Color.rgba8888(colorPalette[i]);
            paletteArray[i] = color;
            paletteMapping[(color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F)] = (byte) i;
        }
        int rr, gg, bb;
        for (int r = 0; r < 32; r++) {
            rr = (r << 3 | r >>> 2);
            for (int g = 0; g < 32; g++) {
                gg = (g << 3 | g >>> 2);
                for (int b = 0; b < 32; b++) {
                    c2 = r << 10 | g << 5 | b;
                    if (paletteMapping[c2] == 0) {
                        bb = (b << 3 | b >>> 2);
                        dist = 0x7FFFFFFF;
                        for (int i = 1; i < plen; i++) {
                            if (dist > (dist = Math.min(dist, metric.difference(paletteArray[i], rr, gg, bb))))
                                paletteMapping[c2] = (byte) i;
                        }
                    }
                }
            }
        }
    }
    /**
     * Analyzes {@code pixmap} for color count and frequency, building a palette with at most 256 colors if there are
     * too many colors to store in a PNG-8 palette. If there are 256 or less colors, this uses the exact colors
     * (although with at most one transparent color, and no alpha for other colors); if there are more than 256 colors
     * or any colors have 50% or less alpha, it will reserve a palette entry for transparent (even if the image has no
     * transparency). Because calling {@link #reduce(Pixmap)} (or any of PNG8's write methods) will dither colors that
     * aren't exact, and dithering works better when the palette can choose colors that are sufficiently different, this
     * uses a threshold value to determine whether it should permit a less-common color into the palette, and if the
     * second color is different enough (as measured by {@link #difference(int, int)}) by a value of at least 400, it is
     * allowed in the palette, otherwise it is kept out for being too similar to existing colors. This doesn't return a
     * value but instead stores the palette info in this object; a PaletteReducer can be assigned to the
     * {@link PNG8#palette} field or can be used directly to {@link #reduce(Pixmap)} a Pixmap.
     *
     * @param pixmap a Pixmap to analyze, making a palette which can be used by this to {@link #reduce(Pixmap)} or by PNG8
     */
    public void analyze(Pixmap pixmap) {
        analyze(pixmap, 400);
    }

    private static final Comparator<IntIntMap.Entry> entryComparator = new Comparator<IntIntMap.Entry>() {
        @Override
        public int compare(IntIntMap.Entry o1, IntIntMap.Entry o2) {
            return o2.value - o1.value;
        }
    };


    /**
     * Analyzes {@code pixmap} for color count and frequency, building a palette with at most 256 colors if there are
     * too many colors to store in a PNG-8 palette. If there are 256 or less colors, this uses the exact colors
     * (although with at most one transparent color, and no alpha for other colors); if there are more than 256 colors
     * or any colors have 50% or less alpha, it will reserve a palette entry for transparent (even if the image has no
     * transparency). Because calling {@link #reduce(Pixmap)} (or any of PNG8's write methods) will dither colors that
     * aren't exact, and dithering works better when the palette can choose colors that are sufficiently different, this
     * takes a threshold value to determine whether it should permit a less-common color into the palette, and if the
     * second color is different enough (as measured by {@link #difference(int, int)}) by a value of at least
     * {@code threshold}, it is allowed in the palette, otherwise it is kept out for being too similar to existing
     * colors. The threshold is usually between 250 and 1000, and 400 is a good default. This doesn't return a value but
     * instead stores the palette info in this object; a PaletteReducer can be assigned to the {@link PNG8#palette}
     * field or can be used directly to {@link #reduce(Pixmap)} a Pixmap.
     *
     * @param pixmap    a Pixmap to analyze, making a palette which can be used by this to {@link #reduce(Pixmap)} or by PNG8
     * @param threshold a minimum color difference as produced by {@link #difference(int, int)}; usually between 250 and 1000, 400 is a good default
     */
    public void analyze(Pixmap pixmap, int threshold) {
        analyze(pixmap, threshold, 256);
    }
    /**
     * Analyzes {@code pixmap} for color count and frequency, building a palette with at most 256 colors if there are
     * too many colors to store in a PNG-8 palette. If there are 256 or less colors, this uses the exact colors
     * (although with at most one transparent color, and no alpha for other colors); if there are more than 256 colors
     * or any colors have 50% or less alpha, it will reserve a palette entry for transparent (even if the image has no
     * transparency). Because calling {@link #reduce(Pixmap)} (or any of PNG8's write methods) will dither colors that
     * aren't exact, and dithering works better when the palette can choose colors that are sufficiently different, this
     * takes a threshold value to determine whether it should permit a less-common color into the palette, and if the
     * second color is different enough (as measured by {@link #difference(int, int)}) by a value of at least
     * {@code threshold}, it is allowed in the palette, otherwise it is kept out for being too similar to existing
     * colors. The threshold is usually between 250 and 1000, and 400 is a good default. This doesn't return a value but
     * instead stores the palette info in this object; a PaletteReducer can be assigned to the {@link PNG8#palette}
     * field or can be used directly to {@link #reduce(Pixmap)} a Pixmap.
     *
     * @param pixmap    a Pixmap to analyze, making a palette which can be used by this to {@link #reduce(Pixmap)} or by PNG8
     * @param threshold a minimum color difference as produced by {@link #difference(int, int)}; usually between 250 and 1000, 400 is a good default
     */
    public void analyze(Pixmap pixmap, int threshold, int limit) {
        Arrays.fill(paletteArray, 0);
        Arrays.fill(paletteMapping, (byte) 0);
        int color;
        final int width = pixmap.getWidth(), height = pixmap.getHeight();
        IntIntMap counts = new IntIntMap(limit);
        int hasTransparent = 0;
        int[] reds = new int[limit], greens = new int[limit], blues = new int[limit];
        for (int y = 0; y < height; y++) {
            for (int x = 0; x < width; x++) {
                color = pixmap.getPixel(x, y);
                if ((color & 0x80) != 0) {
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    counts.getAndIncrement(color, 0, 1);
                } else {
                    hasTransparent = 1;
                }
            }
        }
        final int cs = counts.size;
        ArrayList<IntIntMap.Entry> es = new ArrayList<>(cs);
        for(IntIntMap.Entry e : counts)
        {
            IntIntMap.Entry e2 = new IntIntMap.Entry();
            e2.key = e.key;
            e2.value = e.value;
            es.add(e2);
        }
        Collections.sort(es, entryComparator);
        if (cs + hasTransparent <= limit) {
            int i = hasTransparent;
            for(IntIntMap.Entry e : es) {
                color = e.key;
                paletteArray[i] = color;
                color = (color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F);
                paletteMapping[color] = (byte) i;
                reds[i] = color >>> 10;
                greens[i] = color >>> 5 & 31;
                blues[i] = color & 31;
                i++;
            }
        } else // reduce color count
        {
            int i = 1, c = 0;
            PER_BEST:
            for (; i < limit && c < cs;) {
                color = es.get(c++).key;
                for (int j = 1; j < i; j++) {
                    if (difference(color, paletteArray[j]) < threshold)
                        continue PER_BEST;
                }
                paletteArray[i] = color;
                color = (color >>> 17 & 0x7C00) | (color >>> 14 & 0x3E0) | (color >>> 11 & 0x1F);
                paletteMapping[color] = (byte) i;
                reds[i] = color >>> 10;
                greens[i] = color >>> 5 & 31;
                blues[i] = color & 31;
                i++;
            }
        }
        int c2;
        double dist;
        for (int r = 0; r < 32; r++) {
            for (int g = 0; g < 32; g++) {
                for (int b = 0; b < 32; b++) {
                    c2 = r << 10 | g << 5 | b;
                    if (paletteMapping[c2] == 0) {
                        dist = Double.POSITIVE_INFINITY;
                        for (int i = 1; i < limit; i++) {
                            if (dist > (dist = Math.min(dist, difference(reds[i], greens[i], blues[i], r, g, b))))
                                paletteMapping[c2] = (byte) i;
                        }
                    }
                }
            }
        }
    }

    /**
     * Changes the "strength" of the dither effect applied during {@link #reduce(Pixmap)} calls. The default is 1f,
     * and while both values higher than 1f and lower than 1f are valid, they should not be negative. If you want dither
     * to be eliminated, don't set dither strength to 0; use {@link #reduceSolid(Pixmap)} instead of reduce().
     * @param ditherStrength dither strength as a non-negative float that should be close to 1f
     */
    public void setDitherStrength(float ditherStrength) {
        this.ditherStrength = 0.5f * ditherStrength;
        this.halfDitherStrength = 0.25f * ditherStrength;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can.
     * If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is not incredibly fast because of the extra calculations it has to do for dithering, but if you can
     * compute the PaletteReducer once and reuse it, that will save some time.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduce (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        byte[] curErrorRed, nextErrorRed, curErrorGreen, nextErrorGreen, curErrorBlue, nextErrorBlue;
        if (curErrorRedBytes == null) {
            curErrorRed = (curErrorRedBytes = new ByteArray(lineLen)).items;
            nextErrorRed = (nextErrorRedBytes = new ByteArray(lineLen)).items;
            curErrorGreen = (curErrorGreenBytes = new ByteArray(lineLen)).items;
            nextErrorGreen = (nextErrorGreenBytes = new ByteArray(lineLen)).items;
            curErrorBlue = (curErrorBlueBytes = new ByteArray(lineLen)).items;
            nextErrorBlue = (nextErrorBlueBytes = new ByteArray(lineLen)).items;
        } else {
            curErrorRed = curErrorRedBytes.ensureCapacity(lineLen);
            nextErrorRed = nextErrorRedBytes.ensureCapacity(lineLen);
            curErrorGreen = curErrorGreenBytes.ensureCapacity(lineLen);
            nextErrorGreen = nextErrorGreenBytes.ensureCapacity(lineLen);
            curErrorBlue = curErrorBlueBytes.ensureCapacity(lineLen);
            nextErrorBlue = nextErrorBlueBytes.ensureCapacity(lineLen);
            for (int i = 0; i < lineLen; i++) {
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }

        }
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, rdiff, gdiff, bdiff;
        byte er, eg, eb, paletteIndex;
        for (int y = 0; y < h; y++) {
            int ny = y + 1;
            for (int i = 0; i < lineLen; i++) {
                curErrorRed[i] = nextErrorRed[i];
                curErrorGreen[i] = nextErrorGreen[i];
                curErrorBlue[i] = nextErrorBlue[i];
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    er = curErrorRed[px];
                    eg = curErrorGreen[px];
                    eb = curErrorBlue[px];
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (er), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (eg), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (eb), 0, 0xFF);
                    paletteIndex =
                            paletteMapping[((rr << 7) & 0x7C00)
                                    | ((gg << 2) & 0x3E0)
                                    | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                    rdiff = (color>>>24)-    (used>>>24);
                    gdiff = (color>>>16&255)-(used>>>16&255);
                    bdiff = (color>>>8&255)- (used>>>8&255);
                    if(px < lineLen - 1)
                    {
                        curErrorRed[px+1]   += rdiff * ditherStrength;
                        curErrorGreen[px+1] += gdiff * ditherStrength;
                        curErrorBlue[px+1]  += bdiff * ditherStrength;
                    }
                    if(ny < h)
                    {
                        if(px > 0)
                        {
                            nextErrorRed[px-1]   += rdiff * halfDitherStrength;
                            nextErrorGreen[px-1] += gdiff * halfDitherStrength;
                            nextErrorBlue[px-1]  += bdiff * halfDitherStrength;
                        }
                        nextErrorRed[px]   += rdiff * halfDitherStrength;
                        nextErrorGreen[px] += gdiff * halfDitherStrength;
                        nextErrorBlue[px]  += bdiff * halfDitherStrength;
                    }
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, without dithering. This produces
     * blocky solid sections of color in most images where the palette isn't exact, instead of checkerboard-like
     * dithering patterns. If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceSolid (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y);
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    int rr = ((color >>> 24)       );
                    int gg = ((color >>> 16) & 0xFF);
                    int bb = ((color >>> 8)  & 0xFF);
                    pixmap.drawPixel(px, y, paletteArray[
                            paletteMapping[((rr << 7) & 0x7C00)
                                    | ((gg << 2) & 0x3E0)
                                    | ((bb >>> 3))] & 0xFF]);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can using
     * Burkes dithering instead of the Sierra Lite dithering that {@link #reduce(Pixmap)} uses.
     * If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is not incredibly fast because of the extra calculations it has to do for dithering, but if you can
     * compute the PaletteReducer once and reuse it, that will save some time. Burkes dithering causes error to be
     * propagated to more than twice as many pixels as Sierra Lite (7 instead of 3), but both only affect one row ahead
     * of the pixel that is currently being dithered. For small images, the time spent dithering should be negligible.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceBurkes (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        float r4, r2, r1, g4, g2, g1, b4, b2, b1;
        byte[] curErrorRed, nextErrorRed, curErrorGreen, nextErrorGreen, curErrorBlue, nextErrorBlue;
        if (curErrorRedBytes == null) {
            curErrorRed = (curErrorRedBytes = new ByteArray(lineLen)).items;
            nextErrorRed = (nextErrorRedBytes = new ByteArray(lineLen)).items;
            curErrorGreen = (curErrorGreenBytes = new ByteArray(lineLen)).items;
            nextErrorGreen = (nextErrorGreenBytes = new ByteArray(lineLen)).items;
            curErrorBlue = (curErrorBlueBytes = new ByteArray(lineLen)).items;
            nextErrorBlue = (nextErrorBlueBytes = new ByteArray(lineLen)).items;
        } else {
            curErrorRed = curErrorRedBytes.ensureCapacity(lineLen);
            nextErrorRed = nextErrorRedBytes.ensureCapacity(lineLen);
            curErrorGreen = curErrorGreenBytes.ensureCapacity(lineLen);
            nextErrorGreen = nextErrorGreenBytes.ensureCapacity(lineLen);
            curErrorBlue = curErrorBlueBytes.ensureCapacity(lineLen);
            nextErrorBlue = nextErrorBlueBytes.ensureCapacity(lineLen);
            for (int i = 0; i < lineLen; i++) {
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }

        }
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, rdiff, gdiff, bdiff;
        byte er, eg, eb, paletteIndex;
        for (int y = 0; y < h; y++) {
            int ny = y + 1;
            for (int i = 0; i < lineLen; i++) {
                curErrorRed[i] = nextErrorRed[i];
                curErrorGreen[i] = nextErrorGreen[i];
                curErrorBlue[i] = nextErrorBlue[i];
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    er = curErrorRed[px];
                    eg = curErrorGreen[px];
                    eb = curErrorBlue[px];
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (er), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (eg), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (eb), 0, 0xFF);
                    paletteIndex =
                            paletteMapping[((rr << 7) & 0x7C00)
                                    | ((gg << 2) & 0x3E0)
                                    | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                    rdiff = (color>>>24)-    (used>>>24);
                    gdiff = (color>>>16&255)-(used>>>16&255);
                    bdiff = (color>>>8&255)- (used>>>8&255);
                    r4 = rdiff * halfDitherStrength;
                    g4 = gdiff * halfDitherStrength;
                    b4 = bdiff * halfDitherStrength;
                    r2 = r4 * 0.5f;
                    g2 = g4 * 0.5f;
                    b2 = b4 * 0.5f;
                    r1 = r4 * 0.25f;
                    g1 = g4 * 0.25f;
                    b1 = b4 * 0.25f;
                    if(px < lineLen - 1)
                    {
                        curErrorRed[px+1]   += r4;
                        curErrorGreen[px+1] += g4;
                        curErrorBlue[px+1]  += b4;
                        if(px < lineLen - 2)
                        {

                            curErrorRed[px+2]   += r2;
                            curErrorGreen[px+2] += g2;
                            curErrorBlue[px+2]  += b2;
                        }
                    }
                    if(ny < h)
                    {
                        if(px > 0)
                        {
                            nextErrorRed[px-1]   += r2;
                            nextErrorGreen[px-1] += g2;
                            nextErrorBlue[px-1]  += b2;
                            if(px > 1)
                            {
                                nextErrorRed[px-2]   += r1;
                                nextErrorGreen[px-2] += g1;
                                nextErrorBlue[px-2]  += b1;
                            }
                        }
                        nextErrorRed[px]   += r4;
                        nextErrorGreen[px] += g4;
                        nextErrorBlue[px]  += b4;
                        if(px < lineLen - 1)
                        {
                            nextErrorRed[px+1]   += r2;
                            nextErrorGreen[px+1] += g2;
                            nextErrorBlue[px+1]  += b2;
                            if(px < lineLen - 2)
                            {

                                nextErrorRed[px+2]   += r1;
                                nextErrorGreen[px+2] += g1;
                                nextErrorBlue[px+2]  += b1;
                            }
                        }
                    }
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can using a
     * modified version of the algorithm presented in "Simple gradient-based error-diffusion method" by Xaingyu Y. Hu in
     * the Journal of Electronic Imaging, 2016. This algorithm uses pseudo-randomly-generated noise to adjust
     * Floyd-Steinberg dithering, with input for the pseudo-random state obtained by the non-transparent color values as
     * they are encountered. Very oddly, this tends to produce less random-seeming dither than
     * {@link #reduceBurkes(Pixmap)}, with this method often returning regular checkerboards where Burkes may produce
     * splotches of color. If you want to reduce the colors in a Pixmap based on what it currently contains, call
     * {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is not incredibly fast because of the extra calculations it has to do for dithering, but if you can
     * compute the PaletteReducer once and reuse it, that will save some time. This method is probably slower than
     * {@link #reduceBurkes(Pixmap)} even though Burkes propagates error to more pixels, because this method also has to
     * generate two random values per non-transparent pixel. The random number "algorithm" this uses isn't very good
     * because it doesn't have to be good, it should just be fast and avoid clear artifacts; it's similar to one of
     * <a href="http://www.drdobbs.com/tools/fast-high-quality-parallel-random-number/231000484?pgno=2">Mark Overton's
     * subcycle generators</a> (which are usually paired, but that isn't the case here), but because it's
     * constantly being adjusted by additional colors as input, it may be more comparable to a rolling hash. This uses
     * {@link #randomXi(int)} to get the parameter in Hu's paper that's marked as {@code aξ}, but our randomXi() is
     * adjusted so it has half the range (from -0.5 to 0.5 instead of -1 to 1). That quirk ends up getting rather high
     * quality for this method, though it may have some grainy appearance in certain zones with mid-level intensity (an
     * acknowledged issue with the type of noise-based approach Hu uses, and not a very severe problem).
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceWithNoise (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        byte[] curErrorRed, nextErrorRed, curErrorGreen, nextErrorGreen, curErrorBlue, nextErrorBlue;
        if (curErrorRedBytes == null) {
            curErrorRed = (curErrorRedBytes = new ByteArray(lineLen)).items;
            nextErrorRed = (nextErrorRedBytes = new ByteArray(lineLen)).items;
            curErrorGreen = (curErrorGreenBytes = new ByteArray(lineLen)).items;
            nextErrorGreen = (nextErrorGreenBytes = new ByteArray(lineLen)).items;
            curErrorBlue = (curErrorBlueBytes = new ByteArray(lineLen)).items;
            nextErrorBlue = (nextErrorBlueBytes = new ByteArray(lineLen)).items;
        } else {
            curErrorRed = curErrorRedBytes.ensureCapacity(lineLen);
            nextErrorRed = nextErrorRedBytes.ensureCapacity(lineLen);
            curErrorGreen = curErrorGreenBytes.ensureCapacity(lineLen);
            nextErrorGreen = nextErrorGreenBytes.ensureCapacity(lineLen);
            curErrorBlue = curErrorBlueBytes.ensureCapacity(lineLen);
            nextErrorBlue = nextErrorBlueBytes.ensureCapacity(lineLen);
            for (int i = 0; i < lineLen; i++) {
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }

        }
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, rdiff, gdiff, bdiff, state = 0xFEEDBEEF;
        byte er, eg, eb, paletteIndex;
        //float xir1, xir2, xig1, xig2, xib1, xib2, // would be used if random factors were per-channel
        // used now, where random factors are determined by whole colors as ints
        float xi1, xi2, w1 = ditherStrength * 0.125f, w3 = w1 * 3f, w5 = w1 * 5f, w7 = w1 * 7f;
        for (int y = 0; y < h; y++) {
            int ny = y + 1;
            for (int i = 0; i < lineLen; i++) {
                curErrorRed[i] = nextErrorRed[i];
                curErrorGreen[i] = nextErrorGreen[i];
                curErrorBlue[i] = nextErrorBlue[i];
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    er = curErrorRed[px];
                    eg = curErrorGreen[px];
                    eb = curErrorBlue[px];
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (er), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (eg), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (eb), 0, 0xFF);
                    paletteIndex =
                            paletteMapping[((rr << 7) & 0x7C00)
                                    | ((gg << 2) & 0x3E0)
                                    | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                    rdiff = (color>>>24)-    (used>>>24);
                    gdiff = (color>>>16&255)-(used>>>16&255);
                    bdiff = (color>>>8&255)- (used>>>8&255);
                    state += (color + 0x41C64E6D) ^ color >>> 7;
                    state = (state << 21 | state >>> 11);
                    xi1 = randomXi(state);
                    state ^= (state << 5 | state >>> 27) + 0x9E3779B9;
                    xi2 = randomXi(state);

//                    state += rdiff ^ rdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xir1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xir2 = randomXi(state);
//                    state += gdiff ^ gdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xig1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xig2 = randomXi(state);
//                    state += bdiff ^ bdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xib1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xib2 = randomXi(state);
                    if(px < lineLen - 1)
                    {
                        curErrorRed[px+1]   += rdiff * w7 * (1f + xi1);
                        curErrorGreen[px+1] += gdiff * w7 * (1f + xi1);
                        curErrorBlue[px+1]  += bdiff * w7 * (1f + xi1);
                    }
                    if(ny < h)
                    {
                        if(px > 0)
                        {
                            nextErrorRed[px-1]   += rdiff * w3 * (1f + xi2);
                            nextErrorGreen[px-1] += gdiff * w3 * (1f + xi2);
                            nextErrorBlue[px-1]  += bdiff * w3 * (1f + xi2);
                        }
                        if(px < lineLen - 1)
                        {
                            nextErrorRed[px+1]   += rdiff * w1 * (1f - xi2);
                            nextErrorGreen[px+1] += gdiff * w1 * (1f - xi2);
                            nextErrorBlue[px+1]  += bdiff * w1 * (1f - xi2);
                        }
                        nextErrorRed[px]   += rdiff * w5 * (1f - xi1);
                        nextErrorGreen[px] += gdiff * w5 * (1f - xi1);
                        nextErrorBlue[px]  += bdiff * w5 * (1f - xi1);
                    }
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }
    /**
     * Modifies the given Pixmap so it only uses colors present in this PaletteReducer, dithering when it can using the
     * commonly-used Floyd-Steinberg dithering. If you want to reduce the colors in a Pixmap based on what it currently
     * contains, call {@link #analyze(Pixmap)} with {@code pixmap} as its argument, then call this method with the same
     * Pixmap. You may instead want to use a known palette instead of one computed from a Pixmap;
     * {@link #exact(int[])} is the tool for that job.
     * <p>
     * This method is not incredibly fast because of the extra calculations it has to do for dithering, but if you can
     * compute the PaletteReducer once and reuse it, that will save some time. This method is probably about the same
     * speed as {@link #reduceBurkes(Pixmap)}.
     * @param pixmap a Pixmap that will be modified in place
     * @return the given Pixmap, for chaining
     */
    public Pixmap reduceFloydSteinberg (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        byte[] curErrorRed, nextErrorRed, curErrorGreen, nextErrorGreen, curErrorBlue, nextErrorBlue;
        if (curErrorRedBytes == null) {
            curErrorRed = (curErrorRedBytes = new ByteArray(lineLen)).items;
            nextErrorRed = (nextErrorRedBytes = new ByteArray(lineLen)).items;
            curErrorGreen = (curErrorGreenBytes = new ByteArray(lineLen)).items;
            nextErrorGreen = (nextErrorGreenBytes = new ByteArray(lineLen)).items;
            curErrorBlue = (curErrorBlueBytes = new ByteArray(lineLen)).items;
            nextErrorBlue = (nextErrorBlueBytes = new ByteArray(lineLen)).items;
        } else {
            curErrorRed = curErrorRedBytes.ensureCapacity(lineLen);
            nextErrorRed = nextErrorRedBytes.ensureCapacity(lineLen);
            curErrorGreen = curErrorGreenBytes.ensureCapacity(lineLen);
            nextErrorGreen = nextErrorGreenBytes.ensureCapacity(lineLen);
            curErrorBlue = curErrorBlueBytes.ensureCapacity(lineLen);
            nextErrorBlue = nextErrorBlueBytes.ensureCapacity(lineLen);
            for (int i = 0; i < lineLen; i++) {
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }

        }
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, rdiff, gdiff, bdiff;
        byte er, eg, eb, paletteIndex;
        //float xir1, xir2, xig1, xig2, xib1, xib2, // would be used if random factors were per-channel
        // used now, where random factors are determined by whole colors as ints
        float w1 = ditherStrength * 0.125f, w3 = w1 * 3f, w5 = w1 * 5f, w7 = w1 * 7f;
        for (int y = 0; y < h; y++) {
            int ny = y + 1;
            for (int i = 0; i < lineLen; i++) {
                curErrorRed[i] = nextErrorRed[i];
                curErrorGreen[i] = nextErrorGreen[i];
                curErrorBlue[i] = nextErrorBlue[i];
                nextErrorRed[i] = 0;
                nextErrorGreen[i] = 0;
                nextErrorBlue[i] = 0;
            }
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    er = curErrorRed[px];
                    eg = curErrorGreen[px];
                    eb = curErrorBlue[px];
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (er), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (eg), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (eb), 0, 0xFF);
                    paletteIndex =
                            paletteMapping[((rr << 7) & 0x7C00)
                                    | ((gg << 2) & 0x3E0)
                                    | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                    rdiff = (color>>>24)-    (used>>>24);
                    gdiff = (color>>>16&255)-(used>>>16&255);
                    bdiff = (color>>>8&255)- (used>>>8&255);

//                    state += rdiff ^ rdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xir1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xir2 = randomXi(state);
//                    state += gdiff ^ gdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xig1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xig2 = randomXi(state);
//                    state += bdiff ^ bdiff << 9;
//                    state = (state << 21 | state >>> 11);
//                    xib1 = randomXi(state);
//                    state = (state << 21 | state >>> 11);
//                    xib2 = randomXi(state);
                    if(px < lineLen - 1)
                    {
                        curErrorRed[px+1]   += rdiff * w7;
                        curErrorGreen[px+1] += gdiff * w7;
                        curErrorBlue[px+1]  += bdiff * w7;
                    }
                    if(ny < h)
                    {
                        if(px > 0)
                        {
                            nextErrorRed[px-1]   += rdiff * w3;
                            nextErrorGreen[px-1] += gdiff * w3;
                            nextErrorBlue[px-1]  += bdiff * w3;
                        }
                        if(px < lineLen - 1)
                        {
                            nextErrorRed[px+1]   += rdiff * w1;
                            nextErrorGreen[px+1] += gdiff * w1;
                            nextErrorBlue[px+1]  += bdiff * w1;
                        }
                        nextErrorRed[px]   += rdiff * w5;
                        nextErrorGreen[px] += gdiff * w5;
                        nextErrorBlue[px]  += bdiff * w5;
                    }
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    public Pixmap reduceWithRoberts (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used, adj;
        byte paletteIndex;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    adj = (int)((px * 0xC13FA9A902A6328FL + y * 0x91E10DA5C79E7B1DL >> 57) * ditherStrength);
                    adj ^= adj >> 31;
                    //adj = (-(adj >>> 4 & 1) ^ adj) & 7;
                    adj -= 32 * ditherStrength;
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = MathUtils.clamp(((color >>> 24)       ) + (adj), 0, 0xFF);
                    int gg = MathUtils.clamp(((color >>> 16) & 0xFF) + (adj), 0, 0xFF);
                    int bb = MathUtils.clamp(((color >>> 8)  & 0xFF) + (adj), 0, 0xFF);
                    paletteIndex =
                            paletteMapping[((rr << 7) & 0x7C00)
                                    | ((gg << 2) & 0x3E0)
                                    | ((bb >>> 3))];
                    used = paletteArray[paletteIndex & 0xFF];
                    pixmap.drawPixel(px, y, used);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    public Pixmap reduceRobertsMul (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used;
        float adj, str = ditherStrength * (256f / paletteArray.length) * 0x2.5p-27f;
        long pos;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
//                    adj = (((px * 0xC13FA9A902A6328FL + y * 0x91E10DA5C79E7B1DL >> 40) * 0x1.Fp-26f) * ditherStrength) + 1f;
//                    color |= (color >>> 5 & 0x07070700) | 0xFE;
//                    int rr = MathUtils.clamp((int) (((color >>> 24)       ) * adj), 0, 0xFF);
//                    int gg = MathUtils.clamp((int) (((color >>> 16) & 0xFF) * adj), 0, 0xFF);
//                    int bb = MathUtils.clamp((int) (((color >>> 8)  & 0xFF) * adj), 0, 0xFF);
                    //0xD1B54A32D192ED03L, 0xABC98388FB8FAC03L, 0x8CB92BA72F3D8DD7L
//                    adj = (((px * 0xC13FA9A902A6328FL + y * 0x91E10DA5C79E7B1DL) >> 40) * str);
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = ((color >>> 24)       );//MathUtils.clamp((int) (rr * (1f + adj)), 0, 0xFF);
                    int gg = ((color >>> 16) & 0xFF);//MathUtils.clamp((int) (gg * (1f + adj)), 0, 0xFF);
                    int bb = ((color >>> 8)  & 0xFF);//MathUtils.clamp((int) (bb * (1f + adj)), 0, 0xFF);
                    used = paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))] & 0xFF];
                    pos = (px * 0xC13FA9A902A6328FL - y * 0x91E10DA5C79E7B1DL);
                    pos ^= pos >>> 1;
                    adj = ((pos >> 40) * str);
                    rr = MathUtils.clamp((int) (rr * (1f + adj * ((used >>> 24) - rr >> 3))), 0, 0xFF);
                    gg = MathUtils.clamp((int) (gg * (1f + adj * ((used >>> 16 & 0xFF) - gg >> 3))), 0, 0xFF);
                    bb = MathUtils.clamp((int) (bb * (1f + adj * ((used >>> 8 & 0xFF) - bb >> 3))), 0, 0xFF);
                    pixmap.drawPixel(px, y, paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))] & 0xFF]);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    public Pixmap reduceRobertsEdit (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used;
        int pos;
        float adj, str = -0x3.Fp-20f * ditherStrength;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
//                    adj = (((px * 0xC13FA9A902A6328FL + y * 0x91E10DA5C79E7B1DL >> 40) * 0x1.Fp-26f) * ditherStrength) + 1f;
//                    color |= (color >>> 5 & 0x07070700) | 0xFE;
//                    int rr = MathUtils.clamp((int) (((color >>> 24)       ) * adj), 0, 0xFF);
//                    int gg = MathUtils.clamp((int) (((color >>> 16) & 0xFF) * adj), 0, 0xFF);
//                    int bb = MathUtils.clamp((int) (((color >>> 8)  & 0xFF) * adj), 0, 0xFF);
                    //0xD1B54A32D192ED03L, 0xABC98388FB8FAC03L, 0x8CB92BA72F3D8DD7L
//                    adj = (((px * 0xC13FA9A902A6328FL + y * 0x91E10DA5C79E7B1DL) >> 40) * str);
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = ((color >>> 24)       );//MathUtils.clamp((int) (rr * (1f + adj)), 0, 0xFF);
                    int gg = ((color >>> 16) & 0xFF);//MathUtils.clamp((int) (gg * (1f + adj)), 0, 0xFF);
                    int bb = ((color >>> 8)  & 0xFF);//MathUtils.clamp((int) (bb * (1f + adj)), 0, 0xFF);
                    used = paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))] & 0xFF];
                    pos = (px * (0xC13FA9A9 + y) + y * (0x91E10DA5 + px));
                    pos += pos >>> 1 ^ pos >>> 3 ^ pos >>> 4;
                    //0xE60E2B722B53AEEBL, 0xCEBD76D9EDB6A8EFL, 0xB9C9AA3A51D00B65L, 0xA6F5777F6F88983FL, 0x9609C71EB7D03F7BL, 
                    //0x86D516E50B04AB1BL
//                    long pr = (px * 0xE60E2B722B53AEEBL - y * 0x86D516E50B04AB1BL),
//                         pg = (px * 0xCEBD76D9EDB6A8EFL + y * 0x9609C71EB7D03F7BL),
//                         pb = (y * 0xB9C9AA3A51D00B65L - px * 0xA6F5777F6F88983FL);
//                    str * ((pr ^ pr >>> 1 ^ pr >>> 3 ^ pr >>> 4) >> 40)
//                    str * ((pg ^ pg >>> 1 ^ pg >>> 3 ^ pg >>> 4) >> 40)
//                    str * ((pb ^ pb >>> 1 ^ pb >>> 3 ^ pb >>> 4) >> 40)
                    //(px + y) * 1.6180339887498949f
                    adj = (pos >> 12) * str;
                    //adj = adj * ditherStrength; //(adj * adj * adj + 0x5p-6f)
                    rr = MathUtils.clamp((int) (rr + (adj * (((used >>> 24) - rr)))), 0, 0xFF); //  * 17 >> 4
                    gg = MathUtils.clamp((int) (gg + (adj * (((used >>> 16 & 0xFF) - gg)))), 0, 0xFF); //  * 23 >> 4
                    bb = MathUtils.clamp((int) (bb + (adj * (((used >>> 8 & 0xFF) - bb)))), 0, 0xFF); // * 5 >> 4
                    pixmap.drawPixel(px, y, paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))] & 0xFF]);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }
    public Pixmap reduceShaderMimic (Pixmap pixmap) {
        boolean hasTransparent = (paletteArray[0] == 0);
        final int lineLen = pixmap.getWidth(), h = pixmap.getHeight();
        Pixmap.Blending blending = pixmap.getBlending();
        pixmap.setBlending(Pixmap.Blending.None);
        int color, used;
        float pos;
        float adj;
        for (int y = 0; y < h; y++) {
            for (int px = 0; px < lineLen; px++) {
                color = pixmap.getPixel(px, y) & 0xF8F8F880;
                if ((color & 0x80) == 0 && hasTransparent)
                    pixmap.drawPixel(px, y, 0);
                else {
                    color |= (color >>> 5 & 0x07070700) | 0xFE;
                    int rr = ((color >>> 24)       );
                    int gg = ((color >>> 16) & 0xFF);
                    int bb = ((color >>> 8)  & 0xFF);
                    float len = (rr * 5 + gg * 9 + bb * 2) * 0x1.9p-12f + 1f;
                    //adj = fract(52.9829189 * fract(dot(vec2(0.06711056, 0.00583715), gl_FragCoord.xy))) * len - len * 0.5;
                    used = paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))] & 0xFF];
                    pos = (px * 0.06711056f + y * 0.00583715f);
                    pos -= (int)pos;
                    pos *= 52.9829189f;
                    adj = (pos - (int)pos) * len - len * 0.5f;
                    rr = MathUtils.clamp((int) (rr + (adj * ((rr - (used >>> 24))))), 0, 0xFF); //  * 17 >> 4
                    gg = MathUtils.clamp((int) (gg + (adj * ((gg - (used >>> 16 & 0xFF))))), 0, 0xFF); //  * 23 >> 4
                    bb = MathUtils.clamp((int) (bb + (adj * ((bb - (used >>> 8 & 0xFF))))), 0, 0xFF); // * 5 >> 4
                    pixmap.drawPixel(px, y, paletteArray[paletteMapping[((rr << 7) & 0x7C00)
                            | ((gg << 2) & 0x3E0)
                            | ((bb >>> 3))] & 0xFF]);
                }
            }

        }
        pixmap.setBlending(blending);
        return pixmap;
    }

    /**
     * Looks up {@code color} as if it was part of an image being color-reduced and finds the closest color to it in the
     * palette this holds. Both the parameter and the returned color are RGBA8888 ints.
     * @param color an RGBA8888 int that represents a color this should try to find a similar color for in its palette
     * @return an RGBA8888 int representing a color from this palette, or 0 if color is mostly transparent
     * (0 is often but not always in the palette)
     */
    public int reduceSingle(int color)
    {
        if((color & 0x80) == 0) // less visible than half-transparent
            return 0; // transparent
        return paletteArray[paletteMapping[
                (color >>> 17 & 0x7C00)
                        | (color >>> 14 & 0x3E0)
                        | (color >>> 11 & 0x1F)] & 0xFF];
    }

    /**
     * Looks up {@code color} as if it was part of an image being color-reduced and finds the closest color to it in the
     * palette this holds. The parameter is a RGBA8888 int, the returned color is a byte index into the
     * {@link #paletteArray} (mask it like: {@code paletteArray[reduceIndex(color) & 0xFF]}).
     * @param color an RGBA8888 int that represents a color this should try to find a similar color for in its palette
     * @return a byte index that can be used to look up a color from the {@link #paletteArray}
     */
    public byte reduceIndex(int color)
    {
        if((color & 0x80) == 0) // less visible than half-transparent
            return 0; // transparent
        return paletteMapping[
                (color >>> 17 & 0x7C00)
                        | (color >>> 14 & 0x3E0)
                        | (color >>> 11 & 0x1F)];
    }
    
    /**
     * Modifies {@code color} so its RGB values will match the closest color in this PaletteReducer's palette. If color
     * has {@link Color#a} less than 0.5f, this will simply set color to be fully transparent, with rgba all 0.
     * @param color a libGDX Color that will be modified in-place; do not use a Color constant, use {@link Color#cpy()}
     *              or a temporary Color
     * @return color, after modifications.
     */
    public Color reduceInPlace(Color color)
    {
        if(color.a < 0.5f)
            return color.set(0);
        return color.set(paletteArray[paletteMapping[
                ((int) (color.r * 0x1f.8p+10) & 0x7C00)
                        | ((int) (color.g * 0x1f.8p+5) & 0x3E0)
                        | ((int) (color.r * 0x1f.8p+0))] & 0xFF]);
    }
    public static int hueShift(int rgba)
    {
//        return rgba;
        final int a = rgba & 0xFF;
        final float r = (rgba >>> 24) / 255f, g = (rgba >>> 16 & 0xFF) / 255f, b = (rgba >>> 8 & 0xFF) / 255f,
                luma = r * 0.375f + g * 0.5f + b * 0.125f;
        float adj = MathUtils.sinDeg(luma * luma * (3f - 2f * luma) * 360f);
        adj *= Math.abs(adj) * -0.2f;
        final float warm = r - b + adj, mild = g - b + adj;
        return (MathUtils.clamp((int) ((luma + 0.625f * warm - 0.5f * mild) * 256f), 0, 255)<<24|
                MathUtils.clamp((int) ((luma - 0.375f * warm + 0.5f * mild) * 256f), 0, 255)<<16|
                MathUtils.clamp((int) ((luma - 0.375f * warm - 0.5f * mild) * 256f), 0, 255)<<8|
                a);
    }
    public static void hueShiftPalette(int[] palette)
    {
        for (int i = 0; i < palette.length; i++) {
            palette[i] = hueShift(palette[i]);
        }
    }
    public void hueShift()
    {
        hueShiftPalette(paletteArray);
    }

}
